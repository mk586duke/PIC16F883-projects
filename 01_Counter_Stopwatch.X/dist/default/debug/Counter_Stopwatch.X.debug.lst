

Microchip MPLAB XC8 Assembler V3.10 build 20250813170317 
                                                                                               Fri Sep 19 15:37:29 2025

Microchip MPLAB XC8 C Compiler v3.10 (Free license) build 20250813170317 Og1 
     1                           	processor	16F883
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,space=0,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    13                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,space=0,merge=1,inline,delta=2
    15                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,space=0,delta=2
    17                           	psect	text4,local,class=CODE,space=0,merge=1,inline,delta=2
    18                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=1
    20                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=1
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    22                           	dabs	1,0x7E,2
    23     0000                     
    24                           ; Generated 12/10/2023 GMT
    25                           ; 
    26                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F883 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58     0004                     fsr             equ	4
    59     0004                     fsr0            equ	4
    60     0000                     indf            equ	0
    61     0000                     indf0           equ	0
    62     0002                     pc              equ	2
    63     0002                     pcl             equ	2
    64     000A                     pclath          equ	10
    65     0003                     status          equ	3
    66     0000                     INDF            equ	0	;# 
    67     0001                     TMR0            equ	1	;# 
    68     0002                     PCL             equ	2	;# 
    69     0003                     STATUS          equ	3	;# 
    70     0004                     FSR             equ	4	;# 
    71     0005                     PORTA           equ	5	;# 
    72     0006                     PORTB           equ	6	;# 
    73     0007                     PORTC           equ	7	;# 
    74     0009                     PORTE           equ	9	;# 
    75     000A                     PCLATH          equ	10	;# 
    76     000B                     INTCON          equ	11	;# 
    77     000C                     PIR1            equ	12	;# 
    78     000D                     PIR2            equ	13	;# 
    79     000E                     TMR1            equ	14	;# 
    80     000E                     TMR1L           equ	14	;# 
    81     000F                     TMR1H           equ	15	;# 
    82     0010                     T1CON           equ	16	;# 
    83     0011                     TMR2            equ	17	;# 
    84     0012                     T2CON           equ	18	;# 
    85     0013                     SSPBUF          equ	19	;# 
    86     0014                     SSPCON          equ	20	;# 
    87     0015                     CCPR1           equ	21	;# 
    88     0015                     CCPR1L          equ	21	;# 
    89     0016                     CCPR1H          equ	22	;# 
    90     0017                     CCP1CON         equ	23	;# 
    91     0018                     RCSTA           equ	24	;# 
    92     0019                     TXREG           equ	25	;# 
    93     001A                     RCREG           equ	26	;# 
    94     001B                     CCPR2           equ	27	;# 
    95     001B                     CCPR2L          equ	27	;# 
    96     001C                     CCPR2H          equ	28	;# 
    97     001D                     CCP2CON         equ	29	;# 
    98     001E                     ADRESH          equ	30	;# 
    99     001F                     ADCON0          equ	31	;# 
   100     0081                     OPTION_REG      equ	129	;# 
   101     0085                     TRISA           equ	133	;# 
   102     0086                     TRISB           equ	134	;# 
   103     0087                     TRISC           equ	135	;# 
   104     0089                     TRISE           equ	137	;# 
   105     008C                     PIE1            equ	140	;# 
   106     008D                     PIE2            equ	141	;# 
   107     008E                     PCON            equ	142	;# 
   108     008F                     OSCCON          equ	143	;# 
   109     0090                     OSCTUNE         equ	144	;# 
   110     0091                     SSPCON2         equ	145	;# 
   111     0092                     PR2             equ	146	;# 
   112     0093                     SSPADD          equ	147	;# 
   113     0093                     SSPMSK          equ	147	;# 
   114     0093                     MSK             equ	147	;# 
   115     0094                     SSPSTAT         equ	148	;# 
   116     0095                     WPUB            equ	149	;# 
   117     0096                     IOCB            equ	150	;# 
   118     0097                     VRCON           equ	151	;# 
   119     0098                     TXSTA           equ	152	;# 
   120     0099                     SPBRG           equ	153	;# 
   121     009A                     SPBRGH          equ	154	;# 
   122     009B                     PWM1CON         equ	155	;# 
   123     009C                     ECCPAS          equ	156	;# 
   124     009D                     PSTRCON         equ	157	;# 
   125     009E                     ADRESL          equ	158	;# 
   126     009F                     ADCON1          equ	159	;# 
   127     0105                     WDTCON          equ	261	;# 
   128     0107                     CM1CON0         equ	263	;# 
   129     0108                     CM2CON0         equ	264	;# 
   130     0109                     CM2CON1         equ	265	;# 
   131     010C                     EEDATA          equ	268	;# 
   132     010C                     EEDAT           equ	268	;# 
   133     010D                     EEADR           equ	269	;# 
   134     010E                     EEDATH          equ	270	;# 
   135     010F                     EEADRH          equ	271	;# 
   136     0185                     SRCON           equ	389	;# 
   137     0187                     BAUDCTL         equ	391	;# 
   138     0188                     ANSEL           equ	392	;# 
   139     0189                     ANSELH          equ	393	;# 
   140     018C                     EECON1          equ	396	;# 
   141     018D                     EECON2          equ	397	;# 
   142     0000                     INDF            equ	0	;# 
   143     0001                     TMR0            equ	1	;# 
   144     0002                     PCL             equ	2	;# 
   145     0003                     STATUS          equ	3	;# 
   146     0004                     FSR             equ	4	;# 
   147     0005                     PORTA           equ	5	;# 
   148     0006                     PORTB           equ	6	;# 
   149     0007                     PORTC           equ	7	;# 
   150     0009                     PORTE           equ	9	;# 
   151     000A                     PCLATH          equ	10	;# 
   152     000B                     INTCON          equ	11	;# 
   153     000C                     PIR1            equ	12	;# 
   154     000D                     PIR2            equ	13	;# 
   155     000E                     TMR1            equ	14	;# 
   156     000E                     TMR1L           equ	14	;# 
   157     000F                     TMR1H           equ	15	;# 
   158     0010                     T1CON           equ	16	;# 
   159     0011                     TMR2            equ	17	;# 
   160     0012                     T2CON           equ	18	;# 
   161     0013                     SSPBUF          equ	19	;# 
   162     0014                     SSPCON          equ	20	;# 
   163     0015                     CCPR1           equ	21	;# 
   164     0015                     CCPR1L          equ	21	;# 
   165     0016                     CCPR1H          equ	22	;# 
   166     0017                     CCP1CON         equ	23	;# 
   167     0018                     RCSTA           equ	24	;# 
   168     0019                     TXREG           equ	25	;# 
   169     001A                     RCREG           equ	26	;# 
   170     001B                     CCPR2           equ	27	;# 
   171     001B                     CCPR2L          equ	27	;# 
   172     001C                     CCPR2H          equ	28	;# 
   173     001D                     CCP2CON         equ	29	;# 
   174     001E                     ADRESH          equ	30	;# 
   175     001F                     ADCON0          equ	31	;# 
   176     0081                     OPTION_REG      equ	129	;# 
   177     0085                     TRISA           equ	133	;# 
   178     0086                     TRISB           equ	134	;# 
   179     0087                     TRISC           equ	135	;# 
   180     0089                     TRISE           equ	137	;# 
   181     008C                     PIE1            equ	140	;# 
   182     008D                     PIE2            equ	141	;# 
   183     008E                     PCON            equ	142	;# 
   184     008F                     OSCCON          equ	143	;# 
   185     0090                     OSCTUNE         equ	144	;# 
   186     0091                     SSPCON2         equ	145	;# 
   187     0092                     PR2             equ	146	;# 
   188     0093                     SSPADD          equ	147	;# 
   189     0093                     SSPMSK          equ	147	;# 
   190     0093                     MSK             equ	147	;# 
   191     0094                     SSPSTAT         equ	148	;# 
   192     0095                     WPUB            equ	149	;# 
   193     0096                     IOCB            equ	150	;# 
   194     0097                     VRCON           equ	151	;# 
   195     0098                     TXSTA           equ	152	;# 
   196     0099                     SPBRG           equ	153	;# 
   197     009A                     SPBRGH          equ	154	;# 
   198     009B                     PWM1CON         equ	155	;# 
   199     009C                     ECCPAS          equ	156	;# 
   200     009D                     PSTRCON         equ	157	;# 
   201     009E                     ADRESL          equ	158	;# 
   202     009F                     ADCON1          equ	159	;# 
   203     0105                     WDTCON          equ	261	;# 
   204     0107                     CM1CON0         equ	263	;# 
   205     0108                     CM2CON0         equ	264	;# 
   206     0109                     CM2CON1         equ	265	;# 
   207     010C                     EEDATA          equ	268	;# 
   208     010C                     EEDAT           equ	268	;# 
   209     010D                     EEADR           equ	269	;# 
   210     010E                     EEDATH          equ	270	;# 
   211     010F                     EEADRH          equ	271	;# 
   212     0185                     SRCON           equ	389	;# 
   213     0187                     BAUDCTL         equ	391	;# 
   214     0188                     ANSEL           equ	392	;# 
   215     0189                     ANSELH          equ	393	;# 
   216     018C                     EECON1          equ	396	;# 
   217     018D                     EECON2          equ	397	;# 
   218                           
   219                           	psect	idataBANK0
   220     0268                     __pidataBANK0:
   221                           
   222                           ;initializer for _options
   223     0268  3477               	retlw	119
   224     0269  3414               	retlw	20
   225     026A  34B3               	retlw	179
   226     026B  34B6               	retlw	182
   227     026C  34D4               	retlw	212
   228     026D  34E6               	retlw	230
   229     026E  34E7               	retlw	231
   230     026F  3434               	retlw	52
   231     0270  34F7               	retlw	247
   232     0271  34F6               	retlw	246
   233                           
   234                           ;initializer for _HIGH
   235     0272  34FF               	retlw	255
   236                           
   237                           ;initializer for _LOW
   238     0273  34FF               	retlw	255
   239     0005                     _PORTAbits      set	5
   240     0007                     _PORTC          set	7
   241     0006                     _PORTBbits      set	6
   242     000B                     _INTCONbits     set	11
   243     000C                     _PIR1bits       set	12
   244     0010                     _T1CONbits      set	16
   245     000E                     _TMR1L          set	14
   246     000F                     _TMR1H          set	15
   247     0096                     _IOCB           set	150
   248     0087                     _TRISC          set	135
   249     0086                     _TRISB          set	134
   250     0085                     _TRISA          set	133
   251     008C                     _PIE1bits       set	140
   252     0189                     _ANSELH         set	393
   253     0188                     _ANSEL          set	392
   254                           
   255                           	psect	cinit
   256     0013                     start_initialization:	
   257                           ; #config settings
   258                           
   259     0013                     __initialization:
   260                           
   261                           ; Initialize objects allocated to BANK0
   262     0013  1383               	bcf	3,7	;select IRP bank0
   263     0014  303D               	movlw	low (__pdataBANK0+12)
   264     0015  00FD               	movwf	btemp+-1
   265     0016  3002               	movlw	high __pidataBANK0
   266     0017  00FE               	movwf	btemp
   267     0018  3068               	movlw	low __pidataBANK0
   268     0019  00FF               	movwf	btemp+1
   269     001A  3031               	movlw	low __pdataBANK0
   270     001B  0084               	movwf	4
   271     001C  118A  225B  118A   	fcall	init_ram0
   272                           
   273                           ; Clear objects allocated to BANK0
   274     001F  01BD               	clrf	__pbssBANK0& (0+127)
   275     0020  01BE               	clrf	(__pbssBANK0+1)& (0+127)
   276     0021  01BF               	clrf	(__pbssBANK0+2)& (0+127)
   277     0022  01C0               	clrf	(__pbssBANK0+3)& (0+127)
   278     0023  01C1               	clrf	(__pbssBANK0+4)& (0+127)
   279     0024  01C2               	clrf	(__pbssBANK0+5)& (0+127)
   280     0025  01C3               	clrf	(__pbssBANK0+6)& (0+127)
   281     0026  01C4               	clrf	(__pbssBANK0+7)& (0+127)
   282     0027  01C5               	clrf	(__pbssBANK0+8)& (0+127)
   283     0028  01C6               	clrf	(__pbssBANK0+9)& (0+127)
   284                           
   285                           ; Clear objects allocated to COMMON
   286     0029  01FB               	clrf	__pbssCOMMON& (0+127)
   287     002A  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   288     002B                     end_of_initialization:	
   289                           ;End of C runtime variable initialization code
   290                           
   291     002B                     __end_of__initialization:
   292     002B  0183               	clrf	3
   293     002C  118A  2A0C         	ljmp	_main	;jump to C main() function
   294                           
   295                           	psect	bssCOMMON
   296     007B                     __pbssCOMMON:
   297     007B                     _ms_bucket:
   298     007B                     	ds	2
   299                           
   300                           	psect	bssBANK0
   301     003D                     __pbssBANK0:
   302     003D                     _centiseconds:
   303     003D                     	ds	4
   304     0041                     _last_button2:
   305     0041                     	ds	2
   306     0043                     _last_button1:
   307     0043                     	ds	2
   308     0045                     _paused:
   309     0045                     	ds	2
   310                           
   311                           	psect	dataBANK0
   312     0031                     __pdataBANK0:
   313     0031                     _options:
   314     0031                     	ds	10
   315     003B                     _HIGH:
   316     003B                     	ds	1
   317     003C                     _LOW:
   318     003C                     	ds	1
   319                           
   320                           	psect	inittext
   321     0257                     init_fetch0:	
   322                           ;	Called with low address in FSR and high address in W
   323                           
   324     0257  087E               	movf	btemp,w
   325     0258  008A               	movwf	10
   326     0259  087F               	movf	btemp+1,w
   327     025A  0082               	movwf	2
   328     025B                     init_ram0:	
   329                           ;Called with:
   330                           ;	high address of idata address in btemp 
   331                           ;	low address of idata address in btemp+1 
   332                           ;	low address of data in FSR
   333                           ;	high address + 1 of data in btemp-1
   334                           
   335     025B  118A  2257  118A   	fcall	init_fetch0
   336     025E  0080               	movwf	0
   337     025F  0A84               	incf	4,f
   338     0260  0804               	movf	4,w
   339     0261  067D               	xorwf	btemp+-1,w
   340     0262  1903               	btfsc	3,2
   341     0263  3400               	retlw	0
   342     0264  0AFF               	incf	btemp+1,f
   343     0265  1903               	btfsc	3,2
   344     0266  0AFE               	incf	btemp,f
   345     0267  2A5B               	goto	init_ram0
   346                           
   347                           	psect	cstackCOMMON
   348     0071                     __pcstackCOMMON:
   349     0071                     ?_tmr1_load_1ms:
   350     0071                     ?_tmr1_init_1ms_tick:	
   351                           ; 1 bytes @ 0x0
   352                           
   353     0071                     ?_isr:	
   354                           ; 1 bytes @ 0x0
   355                           
   356     0071                     ?_main:	
   357                           ; 1 bytes @ 0x0
   358                           
   359     0071                     ?i1_tmr1_load_1ms:	
   360                           ; 1 bytes @ 0x0
   361                           
   362     0071                     ?___awdiv:	
   363                           ; 1 bytes @ 0x0
   364                           
   365     0071                     ?___awmod:	
   366                           ; 2 bytes @ 0x0
   367                           
   368     0071                     ___awdiv@divisor:	
   369                           ; 2 bytes @ 0x0
   370                           
   371     0071                     ___awmod@divisor:	
   372                           ; 2 bytes @ 0x0
   373                           
   374     0071                     ??i1_tmr1_load_1ms:	
   375                           ; 2 bytes @ 0x0
   376                           
   377                           
   378                           ; 1 bytes @ 0x0
   379     0071                     	ds	2
   380     0073                     ___awdiv@dividend:
   381     0073                     ___awmod@dividend:	
   382                           ; 2 bytes @ 0x2
   383                           
   384                           
   385                           ; 2 bytes @ 0x2
   386     0073                     	ds	2
   387     0075                     ___awdiv@counter:
   388     0075                     ___awmod@counter:	
   389                           ; 1 bytes @ 0x4
   390                           
   391     0075                     ??___awdiv:	
   392                           ; 1 bytes @ 0x4
   393                           
   394     0075                     ??___awmod:	
   395                           ; 1 bytes @ 0x4
   396                           
   397                           
   398                           ; 1 bytes @ 0x4
   399     0075                     	ds	1
   400     0076                     ___awdiv@sign:
   401     0076                     ___awmod@sign:	
   402                           ; 1 bytes @ 0x5
   403                           
   404                           
   405                           ; 1 bytes @ 0x5
   406     0076                     	ds	1
   407     0077                     ___awdiv@quotient:
   408                           
   409                           ; 2 bytes @ 0x6
   410     0077                     	ds	2
   411     0079                     ?_display:
   412     0079                     display@number:	
   413                           ; 1 bytes @ 0x8
   414                           
   415                           
   416                           ; 2 bytes @ 0x8
   417     0079                     	ds	2
   418     007B                     ??_display:
   419                           
   420                           	psect	cstackBANK0
   421     0020                     __pcstackBANK0:	
   422                           ; 1 bytes @ 0xA
   423                           
   424     0020                     display@low:
   425                           
   426                           ; 2 bytes @ 0x0
   427     0020                     	ds	2
   428     0022                     display@high:
   429                           
   430                           ; 2 bytes @ 0x2
   431     0022                     	ds	2
   432     0024                     display@low_200:
   433                           
   434                           ; 2 bytes @ 0x4
   435     0024                     	ds	2
   436     0026                     display@high_201:
   437                           
   438                           ; 2 bytes @ 0x6
   439     0026                     	ds	2
   440     0028                     display@norm:
   441                           
   442                           ; 2 bytes @ 0x8
   443     0028                     	ds	2
   444     002A                     ??_isr:
   445                           
   446                           ; 1 bytes @ 0xA
   447     002A                     	ds	6
   448     0030                     ??_tmr1_load_1ms:
   449     0030                     ??_tmr1_init_1ms_tick:	
   450                           ; 1 bytes @ 0x10
   451                           
   452     0030                     ??_main:	
   453                           ; 1 bytes @ 0x10
   454                           
   455                           
   456                           ; 1 bytes @ 0x10
   457     0030                     	ds	1
   458                           
   459                           	psect	maintext
   460     020C                     __pmaintext:	
   461 ;;
   462 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   463 ;;
   464 ;; *************** function _main *****************
   465 ;; Defined at:
   466 ;;		line 131 in file "main.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;		None
   469 ;; Auto vars:     Size  Location     Type
   470 ;;		None
   471 ;; Return value:  Size  Location     Type
   472 ;;                  1    wreg      void 
   473 ;; Registers used:
   474 ;;		wreg, status,2, status,0, pclath, cstack
   475 ;; Tracked objects:
   476 ;;		On entry : B00/0
   477 ;;		On exit  : 0/0
   478 ;;		Unchanged: 0/0
   479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   480 ;;      Params:         0       0       0       0
   481 ;;      Locals:         0       0       0       0
   482 ;;      Temps:          0       1       0       0
   483 ;;      Totals:         0       1       0       0
   484 ;;Total ram usage:        1 bytes
   485 ;; Hardware stack levels required when called: 5
   486 ;; This function calls:
   487 ;;		_tmr1_init_1ms_tick
   488 ;; This function is called by:
   489 ;;		Startup code after reset
   490 ;; This function uses a non-reentrant model
   491 ;;
   492                           
   493     020C                     _main:	
   494                           ;psect for function _main
   495                           
   496     020C                     l961:	
   497                           ;incstack = 0
   498                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   499                           
   500                           
   501                           ;main.c: 133:     ANSEL = 0X00;
   502     020C  1683               	bsf	3,5	;RP0=1, select bank3
   503     020D  1703               	bsf	3,6	;RP1=1, select bank3
   504     020E  0188               	clrf	8	;volatile
   505                           
   506                           ;main.c: 134:     ANSELH = 0X00;
   507     020F  0189               	clrf	9	;volatile
   508                           
   509                           ;main.c: 136:     TRISA = 0X00;
   510     0210  1683               	bsf	3,5	;RP0=1, select bank1
   511     0211  1303               	bcf	3,6	;RP1=0, select bank1
   512     0212  0185               	clrf	5	;volatile
   513     0213                     l963:
   514                           
   515                           ;main.c: 137:     TRISB = 3;
   516     0213  3003               	movlw	3
   517     0214  0086               	movwf	6	;volatile
   518                           
   519                           ;main.c: 138:     TRISC = 0X00;
   520     0215  0187               	clrf	7	;volatile
   521     0216                     l965:
   522                           
   523                           ;main.c: 141:     INTCONbits.GIE = 1;
   524     0216  178B               	bsf	11,7	;volatile
   525     0217                     l967:
   526                           
   527                           ;main.c: 142:     INTCONbits.RBIE = 1;
   528     0217  158B               	bsf	11,3	;volatile
   529     0218                     l969:
   530                           
   531                           ;main.c: 143:     IOCB = 0X03;
   532     0218  3003               	movlw	3
   533     0219  0096               	movwf	22	;volatile
   534     021A                     l971:
   535                           
   536                           ;main.c: 145:     tmr1_init_1ms_tick();
   537     021A  118A  2242  118A   	fcall	_tmr1_init_1ms_tick
   538     021D                     l973:
   539                           
   540                           ;main.c: 147:     PORTC = 0XFF;
   541     021D  30FF               	movlw	255
   542     021E  1283               	bcf	3,5	;RP0=0, select bank0
   543     021F  1303               	bcf	3,6	;RP1=0, select bank0
   544     0220  0087               	movwf	7	;volatile
   545     0221                     l975:
   546                           
   547                           ;main.c: 150:         PORTC = LOW;
   548     0221  1283               	bcf	3,5	;RP0=0, select bank0
   549     0222  1303               	bcf	3,6	;RP1=0, select bank0
   550     0223  083C               	movf	_LOW,w
   551     0224  0087               	movwf	7	;volatile
   552     0225                     l977:
   553                           
   554                           ;main.c: 151:         PORTAbits.RA0 = 0;
   555     0225  1005               	bcf	5,0	;volatile
   556     0226                     l979:
   557                           
   558                           ;main.c: 152:         PORTAbits.RA1 = 1;
   559     0226  1485               	bsf	5,1	;volatile
   560     0227                     l981:
   561                           
   562                           ;main.c: 153:         _delay((unsigned long)((1)*(4000000/4000.0)));
   563     0227  30C7               	movlw	199
   564     0228  1283               	bcf	3,5	;RP0=0, select bank0
   565     0229  1303               	bcf	3,6	;RP1=0, select bank0
   566     022A  00B0               	movwf	??_main
   567     022B                     u677:
   568     022B  2A2C               	nop2
   569     022C  0BB0               	decfsz	??_main,f
   570     022D  2A2B               	goto	u677
   571     022E  2A2F               	nop2
   572     022F  0000               	nop
   573     0230                     l983:
   574                           
   575                           ;main.c: 154:         PORTC = HIGH;
   576     0230  1283               	bcf	3,5	;RP0=0, select bank0
   577     0231  1303               	bcf	3,6	;RP1=0, select bank0
   578     0232  083B               	movf	_HIGH,w
   579     0233  0087               	movwf	7	;volatile
   580     0234                     l985:
   581                           
   582                           ;main.c: 155:         PORTAbits.RA0 = 1;
   583     0234  1405               	bsf	5,0	;volatile
   584     0235                     l987:
   585                           
   586                           ;main.c: 156:         PORTAbits.RA1 = 0;
   587     0235  1085               	bcf	5,1	;volatile
   588     0236                     l989:
   589                           
   590                           ;main.c: 157:         _delay((unsigned long)((1)*(4000000/4000.0)));
   591     0236  30C7               	movlw	199
   592     0237  1283               	bcf	3,5	;RP0=0, select bank0
   593     0238  1303               	bcf	3,6	;RP1=0, select bank0
   594     0239  00B0               	movwf	??_main
   595     023A                     u687:
   596     023A  2A3B               	nop2
   597     023B  0BB0               	decfsz	??_main,f
   598     023C  2A3A               	goto	u687
   599     023D  2A3E               	nop2
   600     023E  0000               	nop
   601     023F  2A21               	goto	l975
   602     0240  118A  2811         	ljmp	start
   603     0242                     __end_of_main:
   604                           
   605                           	psect	text1
   606     0242                     __ptext1:	
   607 ;; *************** function _tmr1_init_1ms_tick *****************
   608 ;; Defined at:
   609 ;;		line 82 in file "main.c"
   610 ;; Parameters:    Size  Location     Type
   611 ;;		None
   612 ;; Auto vars:     Size  Location     Type
   613 ;;		None
   614 ;; Return value:  Size  Location     Type
   615 ;;                  1    wreg      void 
   616 ;; Registers used:
   617 ;;		status,2, status,0, pclath, cstack
   618 ;; Tracked objects:
   619 ;;		On entry : 0/0
   620 ;;		On exit  : 0/0
   621 ;;		Unchanged: 0/0
   622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   623 ;;      Params:         0       0       0       0
   624 ;;      Locals:         0       0       0       0
   625 ;;      Temps:          0       0       0       0
   626 ;;      Totals:         0       0       0       0
   627 ;;Total ram usage:        0 bytes
   628 ;; Hardware stack levels used: 1
   629 ;; Hardware stack levels required when called: 4
   630 ;; This function calls:
   631 ;;		_tmr1_load_1ms
   632 ;; This function is called by:
   633 ;;		_main
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637     0242                     _tmr1_init_1ms_tick:	
   638                           ;psect for function _tmr1_init_1ms_tick
   639                           
   640     0242                     l905:	
   641                           ;incstack = 0
   642                           ; Regs used in _tmr1_init_1ms_tick: [status,2+status,0+pclath+cstack]
   643                           
   644                           
   645                           ;main.c: 84:     T1CONbits.TMR1ON = 0;
   646     0242  1283               	bcf	3,5	;RP0=0, select bank0
   647     0243  1303               	bcf	3,6	;RP1=0, select bank0
   648     0244  1010               	bcf	16,0	;volatile
   649                           
   650                           ;main.c: 85:     T1CONbits.T1CKPS0 = 1;
   651     0245  1610               	bsf	16,4	;volatile
   652                           
   653                           ;main.c: 86:     T1CONbits.T1CKPS1 = 1;
   654     0246  1690               	bsf	16,5	;volatile
   655                           
   656                           ;main.c: 87:     T1CONbits.TMR1CS = 0;
   657     0247  1090               	bcf	16,1	;volatile
   658                           
   659                           ;main.c: 88:     T1CONbits.T1OSCEN = 0;
   660     0248  1190               	bcf	16,3	;volatile
   661     0249                     l907:
   662                           
   663                           ;main.c: 89:     tmr1_load_1ms();
   664     0249  118A  2274  118A   	fcall	_tmr1_load_1ms
   665     024C                     l909:
   666                           
   667                           ;main.c: 90:     PIR1bits.TMR1IF = 0;
   668     024C  1283               	bcf	3,5	;RP0=0, select bank0
   669     024D  1303               	bcf	3,6	;RP1=0, select bank0
   670     024E  100C               	bcf	12,0	;volatile
   671     024F                     l911:
   672                           
   673                           ;main.c: 91:     PIE1bits.TMR1IE = 1;
   674     024F  1683               	bsf	3,5	;RP0=1, select bank1
   675     0250  1303               	bcf	3,6	;RP1=0, select bank1
   676     0251  140C               	bsf	12,0	;volatile
   677     0252                     l913:
   678                           
   679                           ;main.c: 92:     INTCONbits.PEIE = 1;
   680     0252  170B               	bsf	11,6	;volatile
   681     0253                     l915:
   682                           
   683                           ;main.c: 93:     T1CONbits.TMR1ON = 1;
   684     0253  1283               	bcf	3,5	;RP0=0, select bank0
   685     0254  1303               	bcf	3,6	;RP1=0, select bank0
   686     0255  1410               	bsf	16,0	;volatile
   687     0256                     l59:
   688     0256  0008               	return
   689     0257                     __end_of_tmr1_init_1ms_tick:
   690                           
   691                           	psect	text2
   692     0274                     __ptext2:	
   693 ;; *************** function _tmr1_load_1ms *****************
   694 ;; Defined at:
   695 ;;		line 77 in file "main.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;		None
   698 ;; Auto vars:     Size  Location     Type
   699 ;;		None
   700 ;; Return value:  Size  Location     Type
   701 ;;                  1    wreg      void 
   702 ;; Registers used:
   703 ;;		None
   704 ;; Tracked objects:
   705 ;;		On entry : 0/0
   706 ;;		On exit  : 0/0
   707 ;;		Unchanged: 0/0
   708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   709 ;;      Params:         0       0       0       0
   710 ;;      Locals:         0       0       0       0
   711 ;;      Temps:          0       0       0       0
   712 ;;      Totals:         0       0       0       0
   713 ;;Total ram usage:        0 bytes
   714 ;; Hardware stack levels used: 1
   715 ;; Hardware stack levels required when called: 3
   716 ;; This function calls:
   717 ;;		Nothing
   718 ;; This function is called by:
   719 ;;		_tmr1_init_1ms_tick
   720 ;; This function uses a non-reentrant model
   721 ;;
   722                           
   723     0274                     _tmr1_load_1ms:	
   724                           ;psect for function _tmr1_load_1ms
   725                           
   726     0274                     l807:	
   727                           ;incstack = 0
   728                           ; Regs used in _tmr1_load_1ms: []
   729                           
   730                           
   731                           ;main.c: 78:     TMR1H = 0xFF;
   732     0274  30FF               	movlw	255
   733     0275  1283               	bcf	3,5	;RP0=0, select bank0
   734     0276  1303               	bcf	3,6	;RP1=0, select bank0
   735     0277  008F               	movwf	15	;volatile
   736                           
   737                           ;main.c: 79:     TMR1L = 0x7D;
   738     0278  307D               	movlw	125
   739     0279  008E               	movwf	14	;volatile
   740     027A                     l56:
   741     027A  0008               	return
   742     027B                     __end_of_tmr1_load_1ms:
   743                           
   744                           	psect	text3
   745     002E                     __ptext3:	
   746 ;; *************** function _isr *****************
   747 ;; Defined at:
   748 ;;		line 97 in file "main.c"
   749 ;; Parameters:    Size  Location     Type
   750 ;;		None
   751 ;; Auto vars:     Size  Location     Type
   752 ;;		None
   753 ;; Return value:  Size  Location     Type
   754 ;;                  1    wreg      void 
   755 ;; Registers used:
   756 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, btemp1, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   762 ;;      Params:         0       0       0       0
   763 ;;      Locals:         0       0       0       0
   764 ;;      Temps:          0       6       0       0
   765 ;;      Totals:         0       6       0       0
   766 ;;Total ram usage:        6 bytes
   767 ;; Hardware stack levels used: 1
   768 ;; Hardware stack levels required when called: 2
   769 ;; This function calls:
   770 ;;		_display
   771 ;;		i1_tmr1_load_1ms
   772 ;; This function is called by:
   773 ;;		Interrupt level 1
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777     002E                     _isr:	
   778                           ;psect for function _isr
   779                           
   780     002E                     i1l919:
   781                           
   782                           ;main.c: 100:     if (PIE1bits.TMR1IE && PIR1bits.TMR1IF) {
   783     002E  1683               	bsf	3,5	;RP0=1, select bank1
   784     002F  1303               	bcf	3,6	;RP1=0, select bank1
   785     0030  1C0C               	btfss	12,0	;volatile
   786     0031  2833               	goto	u54_21
   787     0032  2834               	goto	u54_20
   788     0033                     u54_21:
   789     0033  2880               	goto	i1l939
   790     0034                     u54_20:
   791     0034                     i1l921:
   792     0034  1283               	bcf	3,5	;RP0=0, select bank0
   793     0035  1303               	bcf	3,6	;RP1=0, select bank0
   794     0036  1C0C               	btfss	12,0	;volatile
   795     0037  2839               	goto	u55_21
   796     0038  283A               	goto	u55_20
   797     0039                     u55_21:
   798     0039  2880               	goto	i1l939
   799     003A                     u55_20:
   800     003A                     i1l923:
   801                           
   802                           ;main.c: 101:         tmr1_load_1ms();
   803     003A  118A  227B  118A   	fcall	i1_tmr1_load_1ms
   804     003D                     i1l925:
   805                           
   806                           ;main.c: 102:         PIR1bits.TMR1IF = 0;
   807     003D  1283               	bcf	3,5	;RP0=0, select bank0
   808     003E  1303               	bcf	3,6	;RP1=0, select bank0
   809     003F  100C               	bcf	12,0	;volatile
   810     0040                     i1l927:
   811                           
   812                           ;main.c: 105:         if (!paused && ++ms_bucket >= 100) {
   813     0040  0845               	movf	_paused,w
   814     0041  0446               	iorwf	_paused+1,w
   815     0042  1D03               	btfss	3,2
   816     0043  2845               	goto	u56_21
   817     0044  2846               	goto	u56_20
   818     0045                     u56_21:
   819     0045  2880               	goto	i1l939
   820     0046                     u56_20:
   821     0046                     i1l929:
   822     0046  3001               	movlw	1
   823     0047  07FB               	addwf	_ms_bucket,f	;volatile
   824     0048  1803               	skipnc
   825     0049  0AFC               	incf	_ms_bucket+1,f	;volatile
   826     004A  3000               	movlw	0
   827     004B  07FC               	addwf	_ms_bucket+1,f	;volatile
   828     004C  3000               	movlw	0
   829     004D  027C               	subwf	_ms_bucket+1,w	;volatile
   830     004E  3064               	movlw	100
   831     004F  1903               	skipnz
   832     0050  027B               	subwf	_ms_bucket,w	;volatile
   833     0051  1C03               	skipc
   834     0052  2854               	goto	u57_21
   835     0053  2855               	goto	u57_20
   836     0054                     u57_21:
   837     0054  2880               	goto	i1l939
   838     0055                     u57_20:
   839     0055                     i1l931:
   840                           
   841                           ;main.c: 106:             ms_bucket = 0;
   842     0055  01FB               	clrf	_ms_bucket	;volatile
   843     0056  01FC               	clrf	_ms_bucket+1	;volatile
   844     0057                     i1l933:
   845                           
   846                           ;main.c: 107:             if (centiseconds < 999) {
   847     0057  0840               	movf	_centiseconds+3,w	;volatile
   848     0058  1D03               	btfss	3,2
   849     0059  2868               	goto	u58_21
   850     005A  083F               	movf	_centiseconds+2,w	;volatile
   851     005B  1D03               	btfss	3,2
   852     005C  2868               	goto	u58_21
   853     005D  3003               	movlw	3
   854     005E  023E               	subwf	_centiseconds+1,w	;volatile
   855     005F  1D03               	skipz
   856     0060  2865               	goto	u58_23
   857     0061  30E7               	movlw	231
   858     0062  023D               	subwf	_centiseconds,w	;volatile
   859     0063  1D03               	skipz
   860     0064  2865               	goto	u58_23
   861     0065                     u58_23:
   862     0065  1803               	btfsc	3,0
   863     0066  2868               	goto	u58_21
   864     0067  2869               	goto	u58_20
   865     0068                     u58_21:
   866     0068  2880               	goto	i1l939
   867     0069                     u58_20:
   868     0069                     i1l935:
   869                           
   870                           ;main.c: 108:                 ++centiseconds;
   871     0069  3001               	movlw	1
   872     006A  1283               	bcf	3,5	;RP0=0, select bank0
   873     006B  1303               	bcf	3,6	;RP1=0, select bank0
   874     006C  07BD               	addwf	_centiseconds,f	;volatile
   875     006D  3000               	movlw	0
   876     006E  1803               	skipnc
   877     006F  3001               	movlw	1
   878     0070  07BE               	addwf	_centiseconds+1,f	;volatile
   879     0071  3000               	movlw	0
   880     0072  1803               	skipnc
   881     0073  3001               	movlw	1
   882     0074  07BF               	addwf	_centiseconds+2,f	;volatile
   883     0075  3000               	movlw	0
   884     0076  1803               	skipnc
   885     0077  3001               	movlw	1
   886     0078  07C0               	addwf	_centiseconds+3,f	;volatile
   887     0079                     i1l937:
   888                           
   889                           ;main.c: 109:                 display(centiseconds);
   890     0079  083E               	movf	_centiseconds+1,w	;volatile
   891     007A  00FA               	movwf	display@number+1
   892     007B  083D               	movf	_centiseconds,w	;volatile
   893     007C  00F9               	movwf	display@number
   894     007D  118A  20D5  118A   	fcall	_display
   895     0080                     i1l939:
   896                           
   897                           ;main.c: 117:     if (INTCONbits.RBIE && INTCONbits.RBIF) {
   898     0080  1D8B               	btfss	11,3	;volatile
   899     0081  2883               	goto	u59_21
   900     0082  2884               	goto	u59_20
   901     0083                     u59_21:
   902     0083  28C8               	goto	i1l71
   903     0084                     u59_20:
   904     0084                     i1l941:
   905     0084  1C0B               	btfss	11,0	;volatile
   906     0085  2887               	goto	u60_21
   907     0086  2888               	goto	u60_20
   908     0087                     u60_21:
   909     0087  28C8               	goto	i1l71
   910     0088                     u60_20:
   911     0088                     i1l943:
   912                           
   913                           ;main.c: 118:         if (PORTBbits.RB0 == 1 && last_button1 == 0) {
   914     0088  1283               	bcf	3,5	;RP0=0, select bank0
   915     0089  1303               	bcf	3,6	;RP1=0, select bank0
   916     008A  1C06               	btfss	6,0	;volatile
   917     008B  288D               	goto	u61_21
   918     008C  288E               	goto	u61_20
   919     008D                     u61_21:
   920     008D  28A3               	goto	i1l68
   921     008E                     u61_20:
   922     008E                     i1l945:
   923     008E  0843               	movf	_last_button1,w
   924     008F  0444               	iorwf	_last_button1+1,w
   925     0090  1D03               	btfss	3,2
   926     0091  2893               	goto	u62_21
   927     0092  2894               	goto	u62_20
   928     0093                     u62_21:
   929     0093  28A3               	goto	i1l68
   930     0094                     u62_20:
   931     0094                     i1l947:
   932                           
   933                           ;main.c: 119:             paused = !paused;
   934     0094  0845               	movf	_paused,w
   935     0095  0446               	iorwf	_paused+1,w
   936     0096  1903               	btfsc	3,2
   937     0097  2899               	goto	u63_21
   938     0098  289B               	goto	u63_20
   939     0099                     u63_21:
   940     0099  3001               	movlw	1
   941     009A  289C               	goto	u64_20
   942     009B                     u63_20:
   943     009B  3000               	movlw	0
   944     009C                     u64_20:
   945     009C  00AA               	movwf	??_isr
   946     009D  01AB               	clrf	??_isr+1
   947     009E  082A               	movf	??_isr,w
   948     009F  00C5               	movwf	_paused
   949     00A0  082B               	movf	??_isr+1,w
   950     00A1  00C6               	movwf	_paused+1
   951                           
   952                           ;main.c: 120:         } else if (PORTBbits.RB1 == 1 && last_button2 == 0) {
   953     00A2  28B7               	goto	i1l955
   954     00A3                     i1l68:
   955     00A3  1C86               	btfss	6,1	;volatile
   956     00A4  28A6               	goto	u65_21
   957     00A5  28A7               	goto	u65_20
   958     00A6                     u65_21:
   959     00A6  28B7               	goto	i1l955
   960     00A7                     u65_20:
   961     00A7                     i1l949:
   962     00A7  0841               	movf	_last_button2,w
   963     00A8  0442               	iorwf	_last_button2+1,w
   964     00A9  1D03               	btfss	3,2
   965     00AA  28AC               	goto	u66_21
   966     00AB  28AD               	goto	u66_20
   967     00AC                     u66_21:
   968     00AC  28B7               	goto	i1l955
   969     00AD                     u66_20:
   970     00AD                     i1l951:
   971                           
   972                           ;main.c: 121:             centiseconds = 0;
   973     00AD  3000               	movlw	0
   974     00AE  00C0               	movwf	_centiseconds+3	;volatile
   975     00AF  3000               	movlw	0
   976     00B0  00BF               	movwf	_centiseconds+2	;volatile
   977     00B1  3000               	movlw	0
   978     00B2  00BE               	movwf	_centiseconds+1	;volatile
   979     00B3  3000               	movlw	0
   980     00B4  00BD               	movwf	_centiseconds	;volatile
   981     00B5                     i1l953:
   982                           
   983                           ;main.c: 122:             ms_bucket = 0;
   984     00B5  01FB               	clrf	_ms_bucket	;volatile
   985     00B6  01FC               	clrf	_ms_bucket+1	;volatile
   986     00B7                     i1l955:
   987                           
   988                           ;main.c: 124:         INTCONbits.RBIF = 0;
   989     00B7  100B               	bcf	11,0	;volatile
   990     00B8                     i1l957:
   991                           
   992                           ;main.c: 125:         last_button1 = PORTBbits.RB0;
   993     00B8  0806               	movf	6,w	;volatile
   994     00B9  3901               	andlw	1
   995     00BA  00AA               	movwf	??_isr
   996     00BB  01AB               	clrf	??_isr+1
   997     00BC  082A               	movf	??_isr,w
   998     00BD  00C3               	movwf	_last_button1
   999     00BE  082B               	movf	??_isr+1,w
  1000     00BF  00C4               	movwf	_last_button1+1
  1001     00C0                     i1l959:
  1002                           
  1003                           ;main.c: 126:         last_button2 = PORTBbits.RB1;
  1004     00C0  0C06               	rrf	6,w	;volatile
  1005     00C1  3901               	andlw	1
  1006     00C2  00AA               	movwf	??_isr
  1007     00C3  01AB               	clrf	??_isr+1
  1008     00C4  082A               	movf	??_isr,w
  1009     00C5  00C1               	movwf	_last_button2
  1010     00C6  082B               	movf	??_isr+1,w
  1011     00C7  00C2               	movwf	_last_button2+1
  1012     00C8                     i1l71:
  1013     00C8  1283               	bcf	3,5	;RP0=0, select bank0
  1014     00C9  1303               	bcf	3,6	;RP1=0, select bank0
  1015     00CA  082F               	movf	??_isr+5,w
  1016     00CB  00FF               	movwf	btemp1
  1017     00CC  082E               	movf	??_isr+4,w
  1018     00CD  008A               	movwf	10
  1019     00CE  082D               	movf	??_isr+3,w
  1020     00CF  0084               	movwf	4
  1021     00D0  0E2C               	swapf	??_isr+2,w
  1022     00D1  0083               	movwf	3
  1023     00D2  0EFE               	swapf	btemp,f
  1024     00D3  0E7E               	swapf	btemp,w
  1025     00D4  0009               	retfie
  1026     00D5                     __end_of_isr:
  1027                           
  1028                           	psect	intentry
  1029     0004                     __pintentry:	
  1030                           ;incstack = 0
  1031                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+btemp1+cstack]
  1032                           
  1033     0004                     interrupt_function:
  1034     007E                     saved_w         set	btemp
  1035     0004  00FE               	movwf	btemp
  1036     0005  0E03               	swapf	3,w
  1037     0006  1283               	bcf	3,5	;RP0=0, select bank0
  1038     0007  1303               	bcf	3,6	;RP1=0, select bank0
  1039     0008  00AC               	movwf	??_isr+2
  1040     0009  0804               	movf	4,w
  1041     000A  00AD               	movwf	??_isr+3
  1042     000B  080A               	movf	10,w
  1043     000C  00AE               	movwf	??_isr+4
  1044     000D  087F               	movf	btemp1,w
  1045     000E  00AF               	movwf	??_isr+5
  1046     000F  118A  282E         	ljmp	_isr
  1047                           
  1048                           	psect	text4
  1049     027B                     __ptext4:	
  1050 ;; *************** function i1_tmr1_load_1ms *****************
  1051 ;; Defined at:
  1052 ;;		line 77 in file "main.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;		None
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;		None
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      void 
  1059 ;; Registers used:
  1060 ;;		None
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1066 ;;      Params:         0       0       0       0
  1067 ;;      Locals:         0       0       0       0
  1068 ;;      Temps:          0       0       0       0
  1069 ;;      Totals:         0       0       0       0
  1070 ;;Total ram usage:        0 bytes
  1071 ;; Hardware stack levels used: 1
  1072 ;; This function calls:
  1073 ;;		Nothing
  1074 ;; This function is called by:
  1075 ;;		_isr
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079     027B                     i1_tmr1_load_1ms:	
  1080                           ;psect for function i1_tmr1_load_1ms
  1081                           
  1082     027B                     i1l917:	
  1083                           ;incstack = 0
  1084                           ; Regs used in i1_tmr1_load_1ms: []
  1085                           
  1086                           
  1087                           ;main.c: 78:     TMR1H = 0xFF;
  1088     027B  30FF               	movlw	255
  1089     027C  1283               	bcf	3,5	;RP0=0, select bank0
  1090     027D  1303               	bcf	3,6	;RP1=0, select bank0
  1091     027E  008F               	movwf	15	;volatile
  1092                           
  1093                           ;main.c: 79:     TMR1L = 0x7D;
  1094     027F  307D               	movlw	125
  1095     0280  008E               	movwf	14	;volatile
  1096     0281                     i1l56:
  1097     0281  0008               	return
  1098     0282                     __end_ofi1_tmr1_load_1ms:
  1099                           
  1100                           	psect	text5
  1101     00D5                     __ptext5:	
  1102 ;; *************** function _display *****************
  1103 ;; Defined at:
  1104 ;;		line 49 in file "main.c"
  1105 ;; Parameters:    Size  Location     Type
  1106 ;;  number          2    8[COMMON] int 
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;  norm            2    8[BANK0 ] int 
  1109 ;;  high            2    6[BANK0 ] int 
  1110 ;;  low             2    4[BANK0 ] int 
  1111 ;;  high            2    2[BANK0 ] int 
  1112 ;;  low             2    0[BANK0 ] int 
  1113 ;; Return value:  Size  Location     Type
  1114 ;;                  1    wreg      void 
  1115 ;; Registers used:
  1116 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, btemp1, cstack
  1117 ;; Tracked objects:
  1118 ;;		On entry : 0/0
  1119 ;;		On exit  : 0/0
  1120 ;;		Unchanged: 0/0
  1121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1122 ;;      Params:         2       0       0       0
  1123 ;;      Locals:         0      10       0       0
  1124 ;;      Temps:          0       0       0       0
  1125 ;;      Totals:         2      10       0       0
  1126 ;;Total ram usage:       12 bytes
  1127 ;; Hardware stack levels used: 1
  1128 ;; Hardware stack levels required when called: 1
  1129 ;; This function calls:
  1130 ;;		___awdiv
  1131 ;;		___awmod
  1132 ;; This function is called by:
  1133 ;;		_isr
  1134 ;; This function uses a non-reentrant model
  1135 ;;
  1136                           
  1137     00D5                     _display:	
  1138                           ;psect for function _display
  1139                           
  1140     00D5                     i1l891:	
  1141                           ;incstack = 0
  1142                           ; Regs used in _display: [wreg-fsr0h+status,2+status,0+pclath+btemp1+cstack]
  1143                           
  1144                           
  1145                           ;main.c: 50:     if (number < 100) {
  1146     00D5  087A               	movf	display@number+1,w
  1147     00D6  3A80               	xorlw	128
  1148     00D7  00FF               	movwf	btemp1
  1149     00D8  3080               	movlw	128
  1150     00D9  027F               	subwf	btemp1,w
  1151     00DA  1D03               	skipz
  1152     00DB  28DE               	goto	u53_25
  1153     00DC  3064               	movlw	100
  1154     00DD  0279               	subwf	display@number,w
  1155     00DE                     u53_25:
  1156     00DE  1803               	skipnc
  1157     00DF  28E1               	goto	u53_21
  1158     00E0  28E2               	goto	u53_20
  1159     00E1                     u53_21:
  1160     00E1  2912               	goto	i1l899
  1161     00E2                     u53_20:
  1162     00E2                     i1l893:
  1163                           
  1164                           ;main.c: 51:         int low = number % 10;
  1165     00E2  300A               	movlw	10
  1166     00E3  00F1               	movwf	___awmod@divisor
  1167     00E4  3000               	movlw	0
  1168     00E5  00F2               	movwf	___awmod@divisor+1
  1169     00E6  087A               	movf	display@number+1,w
  1170     00E7  00F4               	movwf	___awmod@dividend+1
  1171     00E8  0879               	movf	display@number,w
  1172     00E9  00F3               	movwf	___awmod@dividend
  1173     00EA  118A  21B5  118A   	fcall	___awmod
  1174     00ED  0872               	movf	?___awmod+1,w
  1175     00EE  1283               	bcf	3,5	;RP0=0, select bank0
  1176     00EF  1303               	bcf	3,6	;RP1=0, select bank0
  1177     00F0  00A1               	movwf	display@low+1
  1178     00F1  0871               	movf	?___awmod,w
  1179     00F2  00A0               	movwf	display@low
  1180     00F3                     i1l895:
  1181                           
  1182                           ;main.c: 52:         LOW = options[low];
  1183     00F3  0820               	movf	display@low,w
  1184     00F4  3E31               	addlw	(low (_options| 0))& (0+255)
  1185     00F5  0084               	movwf	4
  1186     00F6  1383               	bcf	3,7	;select IRP bank0
  1187     00F7  0800               	movf	0,w
  1188     00F8  00BC               	movwf	_LOW
  1189     00F9                     i1l897:
  1190                           
  1191                           ;main.c: 53:         int high = number / 10;
  1192     00F9  300A               	movlw	10
  1193     00FA  00F1               	movwf	___awdiv@divisor
  1194     00FB  3000               	movlw	0
  1195     00FC  00F2               	movwf	___awdiv@divisor+1
  1196     00FD  087A               	movf	display@number+1,w
  1197     00FE  00F4               	movwf	___awdiv@dividend+1
  1198     00FF  0879               	movf	display@number,w
  1199     0100  00F3               	movwf	___awdiv@dividend
  1200     0101  118A  2152  118A   	fcall	___awdiv
  1201     0104  0872               	movf	?___awdiv+1,w
  1202     0105  1283               	bcf	3,5	;RP0=0, select bank0
  1203     0106  1303               	bcf	3,6	;RP1=0, select bank0
  1204     0107  00A3               	movwf	display@high+1
  1205     0108  0871               	movf	?___awdiv,w
  1206     0109  00A2               	movwf	display@high
  1207                           
  1208                           ;main.c: 54:         HIGH = options[high] | 0b00001000;
  1209     010A  0822               	movf	display@high,w
  1210     010B  3E31               	addlw	(low (_options| 0))& (0+255)
  1211     010C  0084               	movwf	4
  1212     010D  1383               	bcf	3,7	;select IRP bank0
  1213     010E  0800               	movf	0,w
  1214     010F  3808               	iorlw	8
  1215     0110  00BB               	movwf	_HIGH
  1216                           
  1217                           ;main.c: 56:     } else {
  1218     0111  2951               	goto	i1l43
  1219     0112                     i1l899:
  1220                           
  1221                           ;main.c: 57:         int norm = number / 10;
  1222     0112  300A               	movlw	10
  1223     0113  00F1               	movwf	___awdiv@divisor
  1224     0114  3000               	movlw	0
  1225     0115  00F2               	movwf	___awdiv@divisor+1
  1226     0116  087A               	movf	display@number+1,w
  1227     0117  00F4               	movwf	___awdiv@dividend+1
  1228     0118  0879               	movf	display@number,w
  1229     0119  00F3               	movwf	___awdiv@dividend
  1230     011A  118A  2152  118A   	fcall	___awdiv
  1231     011D  0872               	movf	?___awdiv+1,w
  1232     011E  1283               	bcf	3,5	;RP0=0, select bank0
  1233     011F  1303               	bcf	3,6	;RP1=0, select bank0
  1234     0120  00A9               	movwf	display@norm+1
  1235     0121  0871               	movf	?___awdiv,w
  1236     0122  00A8               	movwf	display@norm
  1237                           
  1238                           ;main.c: 58:         int low = norm % 10;
  1239     0123  300A               	movlw	10
  1240     0124  00F1               	movwf	___awmod@divisor
  1241     0125  3000               	movlw	0
  1242     0126  00F2               	movwf	___awmod@divisor+1
  1243     0127  0829               	movf	display@norm+1,w
  1244     0128  00F4               	movwf	___awmod@dividend+1
  1245     0129  0828               	movf	display@norm,w
  1246     012A  00F3               	movwf	___awmod@dividend
  1247     012B  118A  21B5  118A   	fcall	___awmod
  1248     012E  0872               	movf	?___awmod+1,w
  1249     012F  1283               	bcf	3,5	;RP0=0, select bank0
  1250     0130  1303               	bcf	3,6	;RP1=0, select bank0
  1251     0131  00A5               	movwf	display@low_200+1
  1252     0132  0871               	movf	?___awmod,w
  1253     0133  00A4               	movwf	display@low_200
  1254     0134                     i1l901:
  1255                           
  1256                           ;main.c: 59:         LOW = options[low];
  1257     0134  0824               	movf	display@low_200,w
  1258     0135  3E31               	addlw	(low (_options| 0))& (0+255)
  1259     0136  0084               	movwf	4
  1260     0137  1383               	bcf	3,7	;select IRP bank0
  1261     0138  0800               	movf	0,w
  1262     0139  00BC               	movwf	_LOW
  1263     013A                     i1l903:
  1264                           
  1265                           ;main.c: 60:         int high = norm / 10;
  1266     013A  300A               	movlw	10
  1267     013B  00F1               	movwf	___awdiv@divisor
  1268     013C  3000               	movlw	0
  1269     013D  00F2               	movwf	___awdiv@divisor+1
  1270     013E  0829               	movf	display@norm+1,w
  1271     013F  00F4               	movwf	___awdiv@dividend+1
  1272     0140  0828               	movf	display@norm,w
  1273     0141  00F3               	movwf	___awdiv@dividend
  1274     0142  118A  2152  118A   	fcall	___awdiv
  1275     0145  0872               	movf	?___awdiv+1,w
  1276     0146  1283               	bcf	3,5	;RP0=0, select bank0
  1277     0147  1303               	bcf	3,6	;RP1=0, select bank0
  1278     0148  00A7               	movwf	display@high_201+1
  1279     0149  0871               	movf	?___awdiv,w
  1280     014A  00A6               	movwf	display@high_201
  1281                           
  1282                           ;main.c: 61:         HIGH = options[high];
  1283     014B  0826               	movf	display@high_201,w
  1284     014C  3E31               	addlw	(low (_options| 0))& (0+255)
  1285     014D  0084               	movwf	4
  1286     014E  1383               	bcf	3,7	;select IRP bank0
  1287     014F  0800               	movf	0,w
  1288     0150  00BB               	movwf	_HIGH
  1289     0151                     i1l43:
  1290     0151  0008               	return
  1291     0152                     __end_of_display:
  1292                           
  1293                           	psect	text6
  1294     01B5                     __ptext6:	
  1295 ;; *************** function ___awmod *****************
  1296 ;; Defined at:
  1297 ;;		line 5 in file "/Applications/microchip/xc8/v3.10/pic/sources/c99/common/awmod.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;  divisor         2    0[COMMON] int 
  1300 ;;  dividend        2    2[COMMON] int 
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;  sign            1    5[COMMON] unsigned char 
  1303 ;;  counter         1    4[COMMON] unsigned char 
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  2    0[COMMON] int 
  1306 ;; Registers used:
  1307 ;;		wreg, status,2, status,0
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1313 ;;      Params:         4       0       0       0
  1314 ;;      Locals:         2       0       0       0
  1315 ;;      Temps:          0       0       0       0
  1316 ;;      Totals:         6       0       0       0
  1317 ;;Total ram usage:        6 bytes
  1318 ;; Hardware stack levels used: 1
  1319 ;; This function calls:
  1320 ;;		Nothing
  1321 ;; This function is called by:
  1322 ;;		_display
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325                           
  1326     01B5                     ___awmod:	
  1327                           ;psect for function ___awmod
  1328                           
  1329     01B5                     i1l853:	
  1330                           ;incstack = 0
  1331                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1332                           
  1333     01B5  01F6               	clrf	___awmod@sign
  1334     01B6                     i1l855:
  1335     01B6  1FF4               	btfss	___awmod@dividend+1,7
  1336     01B7  29B9               	goto	u44_21
  1337     01B8  29BA               	goto	u44_20
  1338     01B9                     u44_21:
  1339     01B9  29C1               	goto	i1l861
  1340     01BA                     u44_20:
  1341     01BA                     i1l857:
  1342     01BA  09F3               	comf	___awmod@dividend,f
  1343     01BB  09F4               	comf	___awmod@dividend+1,f
  1344     01BC  0AF3               	incf	___awmod@dividend,f
  1345     01BD  1903               	skipnz
  1346     01BE  0AF4               	incf	___awmod@dividend+1,f
  1347     01BF                     i1l859:
  1348     01BF  3001               	movlw	1
  1349     01C0  00F6               	movwf	___awmod@sign
  1350     01C1                     i1l861:
  1351     01C1  1FF2               	btfss	___awmod@divisor+1,7
  1352     01C2  29C4               	goto	u45_21
  1353     01C3  29C5               	goto	u45_20
  1354     01C4                     u45_21:
  1355     01C4  29CA               	goto	i1l865
  1356     01C5                     u45_20:
  1357     01C5                     i1l863:
  1358     01C5  09F1               	comf	___awmod@divisor,f
  1359     01C6  09F2               	comf	___awmod@divisor+1,f
  1360     01C7  0AF1               	incf	___awmod@divisor,f
  1361     01C8  1903               	skipnz
  1362     01C9  0AF2               	incf	___awmod@divisor+1,f
  1363     01CA                     i1l865:
  1364     01CA  0871               	movf	___awmod@divisor,w
  1365     01CB  0472               	iorwf	___awmod@divisor+1,w
  1366     01CC  1903               	btfsc	3,2
  1367     01CD  29CF               	goto	u46_21
  1368     01CE  29D0               	goto	u46_20
  1369     01CF                     u46_21:
  1370     01CF  29FD               	goto	i1l883
  1371     01D0                     u46_20:
  1372     01D0                     i1l867:
  1373     01D0  3001               	movlw	1
  1374     01D1  00F5               	movwf	___awmod@counter
  1375     01D2  29DC               	goto	i1l873
  1376     01D3                     i1l869:
  1377     01D3  3001               	movlw	1
  1378     01D4                     u47_25:
  1379     01D4  1003               	clrc
  1380     01D5  0DF1               	rlf	___awmod@divisor,f
  1381     01D6  0DF2               	rlf	___awmod@divisor+1,f
  1382     01D7  3EFF               	addlw	-1
  1383     01D8  1D03               	skipz
  1384     01D9  29D4               	goto	u47_25
  1385     01DA                     i1l871:
  1386     01DA  3001               	movlw	1
  1387     01DB  07F5               	addwf	___awmod@counter,f
  1388     01DC                     i1l873:
  1389     01DC  1FF2               	btfss	___awmod@divisor+1,7
  1390     01DD  29DF               	goto	u48_21
  1391     01DE  29E0               	goto	u48_20
  1392     01DF                     u48_21:
  1393     01DF  29D3               	goto	i1l869
  1394     01E0                     u48_20:
  1395     01E0                     i1l875:
  1396     01E0  0872               	movf	___awmod@divisor+1,w
  1397     01E1  0274               	subwf	___awmod@dividend+1,w
  1398     01E2  1D03               	skipz
  1399     01E3  29E6               	goto	u49_25
  1400     01E4  0871               	movf	___awmod@divisor,w
  1401     01E5  0273               	subwf	___awmod@dividend,w
  1402     01E6                     u49_25:
  1403     01E6  1C03               	skipc
  1404     01E7  29E9               	goto	u49_21
  1405     01E8  29EA               	goto	u49_20
  1406     01E9                     u49_21:
  1407     01E9  29F0               	goto	i1l879
  1408     01EA                     u49_20:
  1409     01EA                     i1l877:
  1410     01EA  0871               	movf	___awmod@divisor,w
  1411     01EB  02F3               	subwf	___awmod@dividend,f
  1412     01EC  0872               	movf	___awmod@divisor+1,w
  1413     01ED  1C03               	skipc
  1414     01EE  03F4               	decf	___awmod@dividend+1,f
  1415     01EF  02F4               	subwf	___awmod@dividend+1,f
  1416     01F0                     i1l879:
  1417     01F0  3001               	movlw	1
  1418     01F1                     u50_25:
  1419     01F1  1003               	clrc
  1420     01F2  0CF2               	rrf	___awmod@divisor+1,f
  1421     01F3  0CF1               	rrf	___awmod@divisor,f
  1422     01F4  3EFF               	addlw	-1
  1423     01F5  1D03               	skipz
  1424     01F6  29F1               	goto	u50_25
  1425     01F7                     i1l881:
  1426     01F7  3001               	movlw	1
  1427     01F8  02F5               	subwf	___awmod@counter,f
  1428     01F9  1D03               	btfss	3,2
  1429     01FA  29FC               	goto	u51_21
  1430     01FB  29FD               	goto	u51_20
  1431     01FC                     u51_21:
  1432     01FC  29E0               	goto	i1l875
  1433     01FD                     u51_20:
  1434     01FD                     i1l883:
  1435     01FD  0876               	movf	___awmod@sign,w
  1436     01FE  1903               	btfsc	3,2
  1437     01FF  2A01               	goto	u52_21
  1438     0200  2A02               	goto	u52_20
  1439     0201                     u52_21:
  1440     0201  2A07               	goto	i1l887
  1441     0202                     u52_20:
  1442     0202                     i1l885:
  1443     0202  09F3               	comf	___awmod@dividend,f
  1444     0203  09F4               	comf	___awmod@dividend+1,f
  1445     0204  0AF3               	incf	___awmod@dividend,f
  1446     0205  1903               	skipnz
  1447     0206  0AF4               	incf	___awmod@dividend+1,f
  1448     0207                     i1l887:
  1449     0207  0874               	movf	___awmod@dividend+1,w
  1450     0208  00F2               	movwf	?___awmod+1
  1451     0209  0873               	movf	___awmod@dividend,w
  1452     020A  00F1               	movwf	?___awmod
  1453     020B                     i1l331:
  1454     020B  0008               	return
  1455     020C                     __end_of___awmod:
  1456                           
  1457                           	psect	text7
  1458     0152                     __ptext7:	
  1459 ;; *************** function ___awdiv *****************
  1460 ;; Defined at:
  1461 ;;		line 5 in file "/Applications/microchip/xc8/v3.10/pic/sources/c99/common/awdiv.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;  divisor         2    0[COMMON] int 
  1464 ;;  dividend        2    2[COMMON] int 
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;  quotient        2    6[COMMON] int 
  1467 ;;  sign            1    5[COMMON] unsigned char 
  1468 ;;  counter         1    4[COMMON] unsigned char 
  1469 ;; Return value:  Size  Location     Type
  1470 ;;                  2    0[COMMON] int 
  1471 ;; Registers used:
  1472 ;;		wreg, status,2, status,0
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1478 ;;      Params:         4       0       0       0
  1479 ;;      Locals:         4       0       0       0
  1480 ;;      Temps:          0       0       0       0
  1481 ;;      Totals:         8       0       0       0
  1482 ;;Total ram usage:        8 bytes
  1483 ;; Hardware stack levels used: 1
  1484 ;; This function calls:
  1485 ;;		Nothing
  1486 ;; This function is called by:
  1487 ;;		_display
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491     0152                     ___awdiv:	
  1492                           ;psect for function ___awdiv
  1493                           
  1494     0152                     i1l809:	
  1495                           ;incstack = 0
  1496                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1497                           
  1498     0152  01F6               	clrf	___awdiv@sign
  1499     0153                     i1l811:
  1500     0153  1FF2               	btfss	___awdiv@divisor+1,7
  1501     0154  2956               	goto	u34_21
  1502     0155  2957               	goto	u34_20
  1503     0156                     u34_21:
  1504     0156  295E               	goto	i1l817
  1505     0157                     u34_20:
  1506     0157                     i1l813:
  1507     0157  09F1               	comf	___awdiv@divisor,f
  1508     0158  09F2               	comf	___awdiv@divisor+1,f
  1509     0159  0AF1               	incf	___awdiv@divisor,f
  1510     015A  1903               	skipnz
  1511     015B  0AF2               	incf	___awdiv@divisor+1,f
  1512     015C                     i1l815:
  1513     015C  3001               	movlw	1
  1514     015D  00F6               	movwf	___awdiv@sign
  1515     015E                     i1l817:
  1516     015E  1FF4               	btfss	___awdiv@dividend+1,7
  1517     015F  2961               	goto	u35_21
  1518     0160  2962               	goto	u35_20
  1519     0161                     u35_21:
  1520     0161  2969               	goto	i1l823
  1521     0162                     u35_20:
  1522     0162                     i1l819:
  1523     0162  09F3               	comf	___awdiv@dividend,f
  1524     0163  09F4               	comf	___awdiv@dividend+1,f
  1525     0164  0AF3               	incf	___awdiv@dividend,f
  1526     0165  1903               	skipnz
  1527     0166  0AF4               	incf	___awdiv@dividend+1,f
  1528     0167                     i1l821:
  1529     0167  3001               	movlw	1
  1530     0168  06F6               	xorwf	___awdiv@sign,f
  1531     0169                     i1l823:
  1532     0169  01F7               	clrf	___awdiv@quotient
  1533     016A  01F8               	clrf	___awdiv@quotient+1
  1534     016B                     i1l825:
  1535     016B  0871               	movf	___awdiv@divisor,w
  1536     016C  0472               	iorwf	___awdiv@divisor+1,w
  1537     016D  1903               	btfsc	3,2
  1538     016E  2970               	goto	u36_21
  1539     016F  2971               	goto	u36_20
  1540     0170                     u36_21:
  1541     0170  29A6               	goto	i1l845
  1542     0171                     u36_20:
  1543     0171                     i1l827:
  1544     0171  3001               	movlw	1
  1545     0172  00F5               	movwf	___awdiv@counter
  1546     0173  297D               	goto	i1l833
  1547     0174                     i1l829:
  1548     0174  3001               	movlw	1
  1549     0175                     u37_25:
  1550     0175  1003               	clrc
  1551     0176  0DF1               	rlf	___awdiv@divisor,f
  1552     0177  0DF2               	rlf	___awdiv@divisor+1,f
  1553     0178  3EFF               	addlw	-1
  1554     0179  1D03               	skipz
  1555     017A  2975               	goto	u37_25
  1556     017B                     i1l831:
  1557     017B  3001               	movlw	1
  1558     017C  07F5               	addwf	___awdiv@counter,f
  1559     017D                     i1l833:
  1560     017D  1FF2               	btfss	___awdiv@divisor+1,7
  1561     017E  2980               	goto	u38_21
  1562     017F  2981               	goto	u38_20
  1563     0180                     u38_21:
  1564     0180  2974               	goto	i1l829
  1565     0181                     u38_20:
  1566     0181                     i1l835:
  1567     0181  3001               	movlw	1
  1568     0182                     u39_25:
  1569     0182  1003               	clrc
  1570     0183  0DF7               	rlf	___awdiv@quotient,f
  1571     0184  0DF8               	rlf	___awdiv@quotient+1,f
  1572     0185  3EFF               	addlw	-1
  1573     0186  1D03               	skipz
  1574     0187  2982               	goto	u39_25
  1575     0188  0872               	movf	___awdiv@divisor+1,w
  1576     0189  0274               	subwf	___awdiv@dividend+1,w
  1577     018A  1D03               	skipz
  1578     018B  298E               	goto	u40_25
  1579     018C  0871               	movf	___awdiv@divisor,w
  1580     018D  0273               	subwf	___awdiv@dividend,w
  1581     018E                     u40_25:
  1582     018E  1C03               	skipc
  1583     018F  2991               	goto	u40_21
  1584     0190  2992               	goto	u40_20
  1585     0191                     u40_21:
  1586     0191  2999               	goto	i1l841
  1587     0192                     u40_20:
  1588     0192                     i1l837:
  1589     0192  0871               	movf	___awdiv@divisor,w
  1590     0193  02F3               	subwf	___awdiv@dividend,f
  1591     0194  0872               	movf	___awdiv@divisor+1,w
  1592     0195  1C03               	skipc
  1593     0196  03F4               	decf	___awdiv@dividend+1,f
  1594     0197  02F4               	subwf	___awdiv@dividend+1,f
  1595     0198                     i1l839:
  1596     0198  1477               	bsf	___awdiv@quotient,0
  1597     0199                     i1l841:
  1598     0199  3001               	movlw	1
  1599     019A                     u41_25:
  1600     019A  1003               	clrc
  1601     019B  0CF2               	rrf	___awdiv@divisor+1,f
  1602     019C  0CF1               	rrf	___awdiv@divisor,f
  1603     019D  3EFF               	addlw	-1
  1604     019E  1D03               	skipz
  1605     019F  299A               	goto	u41_25
  1606     01A0                     i1l843:
  1607     01A0  3001               	movlw	1
  1608     01A1  02F5               	subwf	___awdiv@counter,f
  1609     01A2  1D03               	btfss	3,2
  1610     01A3  29A5               	goto	u42_21
  1611     01A4  29A6               	goto	u42_20
  1612     01A5                     u42_21:
  1613     01A5  2981               	goto	i1l835
  1614     01A6                     u42_20:
  1615     01A6                     i1l845:
  1616     01A6  0876               	movf	___awdiv@sign,w
  1617     01A7  1903               	btfsc	3,2
  1618     01A8  29AA               	goto	u43_21
  1619     01A9  29AB               	goto	u43_20
  1620     01AA                     u43_21:
  1621     01AA  29B0               	goto	i1l849
  1622     01AB                     u43_20:
  1623     01AB                     i1l847:
  1624     01AB  09F7               	comf	___awdiv@quotient,f
  1625     01AC  09F8               	comf	___awdiv@quotient+1,f
  1626     01AD  0AF7               	incf	___awdiv@quotient,f
  1627     01AE  1903               	skipnz
  1628     01AF  0AF8               	incf	___awdiv@quotient+1,f
  1629     01B0                     i1l849:
  1630     01B0  0878               	movf	___awdiv@quotient+1,w
  1631     01B1  00F2               	movwf	?___awdiv+1
  1632     01B2  0877               	movf	___awdiv@quotient,w
  1633     01B3  00F1               	movwf	?___awdiv
  1634     01B4                     i1l318:
  1635     01B4  0008               	return
  1636     01B5                     __end_of___awdiv:
  1637     0001                     ___latbits      equ	1
  1638     007E                     btemp           set	126	;btemp
  1639     007E                     btemp0          set	126
  1640     007F                     btemp1          set	127
  1641     007E                     wtemp0          set	126
  1642     007F                     wtemp0a         set	127
  1643     007F                     ttemp0a         set	127
  1644     0080                     ltemp0a         set	128
  1645                           
  1646                           	psect	config
  1647                           
  1648                           ;Config register CONFIG1 @ 0x2007
  1649                           ;	Oscillator Selection bits
  1650                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  1651                           ;	Watchdog Timer Enable bit
  1652                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1653                           ;	Power-up Timer Enable bit
  1654                           ;	PWRTE = OFF, PWRT disabled
  1655                           ;	RE3/MCLR pin function select bit
  1656                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  1657                           ;	Code Protection bit
  1658                           ;	CP = OFF, Program memory code protection is disabled
  1659                           ;	Data Code Protection bit
  1660                           ;	CPD = OFF, Data memory code protection is disabled
  1661                           ;	Brown Out Reset Selection bits
  1662                           ;	BOREN = OFF, BOR disabled
  1663                           ;	Internal External Switchover bit
  1664                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1665                           ;	Fail-Safe Clock Monitor Enabled bit
  1666                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1667                           ;	Low Voltage Programming Enable bit
  1668                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1669                           ;	In-Circuit Debugger Mode bit
  1670                           ;	DEBUG = 0x1, unprogrammed default
  1671     2007                     	org	8199
  1672     2007  20F1               	dw	8433
  1673                           
  1674                           ;Config register CONFIG2 @ 0x2008
  1675                           ;	Brown-out Reset Selection bit
  1676                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1677                           ;	Flash Program Memory Self Write Enable bits
  1678                           ;	WRT = OFF, Write protection off
  1679     2008                     	org	8200
  1680     2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        12
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     10      12
    BANK0            80     17      39
    BANK1            80      0       0
    BANK2            69      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_display
    _display->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_display

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0       0
                                             16 BANK0      1     1      0
                 _tmr1_init_1ms_tick
 ---------------------------------------------------------------------------------
 (1) _tmr1_init_1ms_tick                                   0     0      0       0
                      _tmr1_load_1ms
 ---------------------------------------------------------------------------------
 (2) _tmr1_load_1ms                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  6     6      0     832
                                             10 BANK0      6     6      0
                            _display
                    i1_tmr1_load_1ms
 ---------------------------------------------------------------------------------
 (4) i1_tmr1_load_1ms                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _display                                             12    10      2     832
                                              8 COMMON     2     0      2
                                              0 BANK0     10    10      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     300
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     306
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _tmr1_init_1ms_tick
     _tmr1_load_1ms

 _isr (ROOT)
   _display
     ___awdiv
     ___awmod
   i1_tmr1_load_1ms

Address spaces:
Name               Size   Autos  Total    Usage
BANK2               69      0       0      0.0%
BITBANK2            69      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80     17      39     48.8%
BITBANK0            80      0       0      0.0%
COMMON              13     10      12     92.3%
BITCOMMON           13      0       0      0.0%
DATA                 0      0      51      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.10 build 20250813170317 
Symbol Table                                                                                   Fri Sep 19 15:37:29 2025

          ?i1_tmr1_load_1ms 0071                           pc 0002                          l56 027A  
                        l59 0256                ___awdiv@sign 0076                          fsr 0004  
                       l807 0274                         l911 024F                         l913 0252  
                       l905 0242                         l915 0253                         l907 0249  
                       l909 024C                         l961 020C                         l971 021A  
                       l963 0213                         l981 0227                         l973 021D  
                       l965 0216                         l983 0230                         l975 0221  
                       l967 0217                         l985 0234                         l977 0225  
                       l969 0218                         l987 0235                         l979 0226  
                       l989 0236                         _LOW 003C                         u677 022B  
                       u687 023A                         _isr 002E                         fsr0 0004  
                       indf 0000                ___awmod@sign 0076  __end_of_tmr1_init_1ms_tick 0257  
                      ?_isr 0071                        _HIGH 003B                        _IOCB 0096  
                      i1l43 0151                        i1l71 00C8                        i1l56 0281  
                      i1l68 00A3                 display@high 0022                 display@norm 0028  
                      _main 020C                        btemp 007E                        start 0011  
                     ??_isr 002A                       ?_main 0071             __end_of___awdiv 01B5  
           __end_of___awmod 020C                       _ANSEL 0188             ___awdiv@divisor 0071  
                     i1l331 020B                       i1l318 01B4                       i1l811 0153  
                     i1l821 0167                       i1l813 0157                       i1l901 0134  
                     i1l831 017B                       i1l823 0169                       i1l815 015C  
                     i1l903 013A                       i1l841 0199                       i1l833 017D  
                     i1l825 016B                       i1l817 015E                       i1l809 0152  
                     i1l921 0034                       i1l843 01A0                       i1l835 0181  
                     i1l827 0171                       i1l819 0162                       i1l931 0055  
                     i1l923 003A                       i1l837 0192                       i1l829 0174  
                     i1l845 01A6                       i1l861 01C1                       i1l853 01B5  
                     i1l917 027B                       i1l941 0084                       i1l933 0057  
                     i1l925 003D                       i1l847 01AB                       i1l839 0198  
                     i1l871 01DA                       i1l863 01C5                       i1l855 01B6  
                     i1l951 00AD                       i1l943 0088                       i1l935 0069  
                     i1l927 0040                       i1l919 002E                       i1l849 01B0  
                     i1l881 01F7                       i1l873 01DC                       i1l865 01CA  
                     i1l857 01BA                       i1l953 00B5                       i1l945 008E  
                     i1l937 0079                       i1l929 0046                       i1l875 01E0  
                     i1l867 01D0                       i1l883 01FD                       i1l859 01BF  
                     i1l891 00D5                       i1l955 00B7                       i1l947 0094  
                     i1l939 0080                       i1l885 0202                       i1l877 01EA  
                     i1l869 01D3                       i1l893 00E2                       i1l957 00B8  
                     i1l949 00A7                       i1l887 0207                       i1l879 01F0  
                     i1l895 00F3                       i1l959 00C0                       i1l897 00F9  
                     i1l899 0112             ___awdiv@counter 0075                       u40_20 0192  
                     u40_21 0191                       u40_25 018E                       _TMR1H 000F  
                     u41_25 019A                       _TMR1L 000E                       u42_20 01A6  
                     u34_20 0157                       u42_21 01A5                       u34_21 0156  
                     u50_25 01F1                       u43_20 01AB                       u35_20 0162  
                     u51_20 01FD                       u43_21 01AA                       u35_21 0161  
                     u51_21 01FC                       _PORTC 0007                       u36_20 0171  
                     u52_20 0202                       u44_20 01BA                       u60_20 0088  
                     u36_21 0170                       u52_21 0201                       u44_21 01B9  
                     u60_21 0087                       u45_20 01C5                       u53_20 00E2  
                     u61_20 008E                       u45_21 01C4                       u53_21 00E1  
                     u61_21 008D                       u37_25 0175                       u53_25 00DE  
                     u38_20 0181                       u46_20 01D0                       u62_20 0094  
                     u54_20 0034                       u38_21 0180                       u46_21 01CF  
                     u62_21 0093                       u54_21 0033                       u63_20 009B  
                     u55_20 003A                       u63_21 0099                       u55_21 0039  
                     u39_25 0182                       u47_25 01D4                       u48_20 01E0  
                     u64_20 009C                       u56_20 0046                       u48_21 01DF  
                     u56_21 0045                       u49_20 01EA                       u65_20 00A7  
                     u57_20 0055                       u49_21 01E9                       u65_21 00A6  
                     u57_21 0054                       _TRISA 0085                       _TRISB 0086  
                     u49_25 01E6                       _TRISC 0087                       u66_20 00AD  
                     u58_20 0069                       u66_21 00AC                       u58_21 0068  
                     u58_23 0065                       u59_20 0084                       u59_21 0083  
           __end_of_display 0152                       btemp0 007E                       btemp1 007F  
                     pclath 000A                       status 0003                       wtemp0 007E  
     __end_of_tmr1_load_1ms 027B             __initialization 0013                __end_of_main 0242  
                    ??_main 0030            ___awdiv@dividend 0073                      _ANSELH 0189  
             display@number 0079                   ??___awdiv 0075                   ??___awmod 0075  
                    _paused 0045            ___awdiv@quotient 0077             ___awmod@divisor 0071  
           ___awmod@counter 0075                   ??_display 007B                      ltemp0a 0080  
                    saved_w 007E                      ttemp0a 007F                      wtemp0a 007F  
   __end_of__initialization 002B              __pcstackCOMMON 0071                __pidataBANK0 0268  
                __pbssBANK0 003D          _tmr1_init_1ms_tick 0242                  __pmaintext 020C  
       ?_tmr1_init_1ms_tick 0071                  __pintentry 0004                _centiseconds 003D  
      ??_tmr1_init_1ms_tick 0030              display@low_200 0024                     ___awdiv 0152  
                   ___awmod 01B5                     __ptext1 0242                     __ptext2 0274  
                   __ptext3 002E                     __ptext4 027B                     __ptext5 00D5  
                   __ptext6 01B5                     __ptext7 0152                     _display 00D5  
                 _T1CONbits 0010            ___awmod@dividend 0073                     _options 0031  
      end_of_initialization 002B                   _PORTAbits 0005                   _PORTBbits 0006  
         ??i1_tmr1_load_1ms 0071                  display@low 0020         start_initialization 0013  
               __end_of_isr 00D5               _tmr1_load_1ms 0274                  init_fetch0 0257  
               __pdataBANK0 0031                _last_button1 0043                _last_button2 0041  
               __pbssCOMMON 007B                   ___latbits 0001               __pcstackBANK0 0020  
            ?_tmr1_load_1ms 0071                    ?___awdiv 0071                    ?___awmod 0071  
                  ?_display 0079           interrupt_function 0004                   _ms_bucket 007B  
                  _PIE1bits 008C                    _PIR1bits 000C             i1_tmr1_load_1ms 027B  
           display@high_201 0026             ??_tmr1_load_1ms 0030     __end_ofi1_tmr1_load_1ms 0282  
                _INTCONbits 000B                    init_ram0 025B                    intlevel1 0000  
