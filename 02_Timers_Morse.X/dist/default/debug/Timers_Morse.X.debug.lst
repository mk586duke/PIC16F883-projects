

Microchip MPLAB XC8 Assembler V3.10 build 20250813170317 
                                                                                               Tue Sep 23 11:28:46 2025

Microchip MPLAB XC8 C Compiler v3.10 (Free license) build 20250813170317 Og1 
     1                           	processor	16F883
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	inittext,global,class=CODE,space=0,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    15                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,space=0,merge=1,inline,delta=2
    17                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,space=0,delta=2
    19                           	psect	text4,local,class=CODE,space=0,merge=1,inline,delta=2
    20                           	psect	text5,local,class=CODE,space=0,merge=1,inline,delta=2
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    22                           	dabs	1,0x7E,2
    23     0000                     
    24                           ; Generated 12/10/2023 GMT
    25                           ; 
    26                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F883 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58     0004                     fsr             equ	4
    59     0004                     fsr0            equ	4
    60     0000                     indf            equ	0
    61     0000                     indf0           equ	0
    62     0002                     pc              equ	2
    63     0002                     pcl             equ	2
    64     000A                     pclath          equ	10
    65     0003                     status          equ	3
    66     0000                     INDF            equ	0	;# 
    67     0001                     TMR0            equ	1	;# 
    68     0002                     PCL             equ	2	;# 
    69     0003                     STATUS          equ	3	;# 
    70     0004                     FSR             equ	4	;# 
    71     0005                     PORTA           equ	5	;# 
    72     0006                     PORTB           equ	6	;# 
    73     0007                     PORTC           equ	7	;# 
    74     0009                     PORTE           equ	9	;# 
    75     000A                     PCLATH          equ	10	;# 
    76     000B                     INTCON          equ	11	;# 
    77     000C                     PIR1            equ	12	;# 
    78     000D                     PIR2            equ	13	;# 
    79     000E                     TMR1            equ	14	;# 
    80     000E                     TMR1L           equ	14	;# 
    81     000F                     TMR1H           equ	15	;# 
    82     0010                     T1CON           equ	16	;# 
    83     0011                     TMR2            equ	17	;# 
    84     0012                     T2CON           equ	18	;# 
    85     0013                     SSPBUF          equ	19	;# 
    86     0014                     SSPCON          equ	20	;# 
    87     0015                     CCPR1           equ	21	;# 
    88     0015                     CCPR1L          equ	21	;# 
    89     0016                     CCPR1H          equ	22	;# 
    90     0017                     CCP1CON         equ	23	;# 
    91     0018                     RCSTA           equ	24	;# 
    92     0019                     TXREG           equ	25	;# 
    93     001A                     RCREG           equ	26	;# 
    94     001B                     CCPR2           equ	27	;# 
    95     001B                     CCPR2L          equ	27	;# 
    96     001C                     CCPR2H          equ	28	;# 
    97     001D                     CCP2CON         equ	29	;# 
    98     001E                     ADRESH          equ	30	;# 
    99     001F                     ADCON0          equ	31	;# 
   100     0081                     OPTION_REG      equ	129	;# 
   101     0085                     TRISA           equ	133	;# 
   102     0086                     TRISB           equ	134	;# 
   103     0087                     TRISC           equ	135	;# 
   104     0089                     TRISE           equ	137	;# 
   105     008C                     PIE1            equ	140	;# 
   106     008D                     PIE2            equ	141	;# 
   107     008E                     PCON            equ	142	;# 
   108     008F                     OSCCON          equ	143	;# 
   109     0090                     OSCTUNE         equ	144	;# 
   110     0091                     SSPCON2         equ	145	;# 
   111     0092                     PR2             equ	146	;# 
   112     0093                     SSPADD          equ	147	;# 
   113     0093                     SSPMSK          equ	147	;# 
   114     0093                     MSK             equ	147	;# 
   115     0094                     SSPSTAT         equ	148	;# 
   116     0095                     WPUB            equ	149	;# 
   117     0096                     IOCB            equ	150	;# 
   118     0097                     VRCON           equ	151	;# 
   119     0098                     TXSTA           equ	152	;# 
   120     0099                     SPBRG           equ	153	;# 
   121     009A                     SPBRGH          equ	154	;# 
   122     009B                     PWM1CON         equ	155	;# 
   123     009C                     ECCPAS          equ	156	;# 
   124     009D                     PSTRCON         equ	157	;# 
   125     009E                     ADRESL          equ	158	;# 
   126     009F                     ADCON1          equ	159	;# 
   127     0105                     WDTCON          equ	261	;# 
   128     0107                     CM1CON0         equ	263	;# 
   129     0108                     CM2CON0         equ	264	;# 
   130     0109                     CM2CON1         equ	265	;# 
   131     010C                     EEDATA          equ	268	;# 
   132     010C                     EEDAT           equ	268	;# 
   133     010D                     EEADR           equ	269	;# 
   134     010E                     EEDATH          equ	270	;# 
   135     010F                     EEADRH          equ	271	;# 
   136     0185                     SRCON           equ	389	;# 
   137     0187                     BAUDCTL         equ	391	;# 
   138     0188                     ANSEL           equ	392	;# 
   139     0189                     ANSELH          equ	393	;# 
   140     018C                     EECON1          equ	396	;# 
   141     018D                     EECON2          equ	397	;# 
   142     0000                     INDF            equ	0	;# 
   143     0001                     TMR0            equ	1	;# 
   144     0002                     PCL             equ	2	;# 
   145     0003                     STATUS          equ	3	;# 
   146     0004                     FSR             equ	4	;# 
   147     0005                     PORTA           equ	5	;# 
   148     0006                     PORTB           equ	6	;# 
   149     0007                     PORTC           equ	7	;# 
   150     0009                     PORTE           equ	9	;# 
   151     000A                     PCLATH          equ	10	;# 
   152     000B                     INTCON          equ	11	;# 
   153     000C                     PIR1            equ	12	;# 
   154     000D                     PIR2            equ	13	;# 
   155     000E                     TMR1            equ	14	;# 
   156     000E                     TMR1L           equ	14	;# 
   157     000F                     TMR1H           equ	15	;# 
   158     0010                     T1CON           equ	16	;# 
   159     0011                     TMR2            equ	17	;# 
   160     0012                     T2CON           equ	18	;# 
   161     0013                     SSPBUF          equ	19	;# 
   162     0014                     SSPCON          equ	20	;# 
   163     0015                     CCPR1           equ	21	;# 
   164     0015                     CCPR1L          equ	21	;# 
   165     0016                     CCPR1H          equ	22	;# 
   166     0017                     CCP1CON         equ	23	;# 
   167     0018                     RCSTA           equ	24	;# 
   168     0019                     TXREG           equ	25	;# 
   169     001A                     RCREG           equ	26	;# 
   170     001B                     CCPR2           equ	27	;# 
   171     001B                     CCPR2L          equ	27	;# 
   172     001C                     CCPR2H          equ	28	;# 
   173     001D                     CCP2CON         equ	29	;# 
   174     001E                     ADRESH          equ	30	;# 
   175     001F                     ADCON0          equ	31	;# 
   176     0081                     OPTION_REG      equ	129	;# 
   177     0085                     TRISA           equ	133	;# 
   178     0086                     TRISB           equ	134	;# 
   179     0087                     TRISC           equ	135	;# 
   180     0089                     TRISE           equ	137	;# 
   181     008C                     PIE1            equ	140	;# 
   182     008D                     PIE2            equ	141	;# 
   183     008E                     PCON            equ	142	;# 
   184     008F                     OSCCON          equ	143	;# 
   185     0090                     OSCTUNE         equ	144	;# 
   186     0091                     SSPCON2         equ	145	;# 
   187     0092                     PR2             equ	146	;# 
   188     0093                     SSPADD          equ	147	;# 
   189     0093                     SSPMSK          equ	147	;# 
   190     0093                     MSK             equ	147	;# 
   191     0094                     SSPSTAT         equ	148	;# 
   192     0095                     WPUB            equ	149	;# 
   193     0096                     IOCB            equ	150	;# 
   194     0097                     VRCON           equ	151	;# 
   195     0098                     TXSTA           equ	152	;# 
   196     0099                     SPBRG           equ	153	;# 
   197     009A                     SPBRGH          equ	154	;# 
   198     009B                     PWM1CON         equ	155	;# 
   199     009C                     ECCPAS          equ	156	;# 
   200     009D                     PSTRCON         equ	157	;# 
   201     009E                     ADRESL          equ	158	;# 
   202     009F                     ADCON1          equ	159	;# 
   203     0105                     WDTCON          equ	261	;# 
   204     0107                     CM1CON0         equ	263	;# 
   205     0108                     CM2CON0         equ	264	;# 
   206     0109                     CM2CON1         equ	265	;# 
   207     010C                     EEDATA          equ	268	;# 
   208     010C                     EEDAT           equ	268	;# 
   209     010D                     EEADR           equ	269	;# 
   210     010E                     EEDATH          equ	270	;# 
   211     010F                     EEADRH          equ	271	;# 
   212     0185                     SRCON           equ	389	;# 
   213     0187                     BAUDCTL         equ	391	;# 
   214     0188                     ANSEL           equ	392	;# 
   215     0189                     ANSELH          equ	393	;# 
   216     018C                     EECON1          equ	396	;# 
   217     018D                     EECON2          equ	397	;# 
   218                           
   219                           	psect	idataCOMMON
   220     014E                     __pidataCOMMON:
   221                           
   222                           ;initializer for _start_400ms
   223     014E  34B0               	retlw	176
   224     014F  343C               	retlw	60
   225                           
   226                           	psect	idataBANK0
   227     011D                     __pidataBANK0:
   228                           
   229                           ;initializer for _options
   230     011D  3477               	retlw	119
   231     011E  3414               	retlw	20
   232     011F  34B3               	retlw	179
   233     0120  34B6               	retlw	182
   234     0121  34D4               	retlw	212
   235     0122  34E6               	retlw	230
   236     0123  34E7               	retlw	231
   237     0124  3434               	retlw	52
   238     0125  34F7               	retlw	247
   239     0126  34F6               	retlw	246
   240     0127  34F5               	retlw	245
   241     0128  34C7               	retlw	199
   242     0129  3463               	retlw	99
   243     012A  3497               	retlw	151
   244     012B  34E3               	retlw	227
   245     012C  34E1               	retlw	225
   246                           
   247                           ;initializer for _HIGH
   248     012D  34FF               	retlw	255
   249                           
   250                           ;initializer for _LOW
   251     012E  34FF               	retlw	255
   252     000E                     _TMR1           set	14
   253     0005                     _PORTAbits      set	5
   254     0006                     _PORTBbits      set	6
   255     0007                     _PORTC          set	7
   256     000B                     _INTCONbits     set	11
   257     000C                     _PIR1bits       set	12
   258     0010                     _T1CONbits      set	16
   259     0096                     _IOCB           set	150
   260     0087                     _TRISC          set	135
   261     0086                     _TRISB          set	134
   262     0085                     _TRISA          set	133
   263     008C                     _PIE1bits       set	140
   264     0189                     _ANSELH         set	393
   265     0188                     _ANSEL          set	392
   266                           
   267                           	psect	cinit
   268     000F                     start_initialization:	
   269                           ; #config settings
   270                           
   271     000F                     __initialization:
   272                           
   273                           ; Initialize objects allocated to BANK0
   274     000F  1383               	bcf	3,7	;select IRP bank0
   275     0010  3032               	movlw	low (__pdataBANK0+18)
   276     0011  00FD               	movwf	btemp+-1
   277     0012  3001               	movlw	high __pidataBANK0
   278     0013  00FE               	movwf	btemp
   279     0014  301D               	movlw	low __pidataBANK0
   280     0015  00FF               	movwf	btemp+1
   281     0016  3020               	movlw	low __pdataBANK0
   282     0017  0084               	movwf	4
   283     0018  118A  2133  118A   	fcall	init_ram0
   284                           
   285                           ; Initialize objects allocated to COMMON
   286     001B  118A  214E  118A   	fcall	__pidataCOMMON	;fetch initializer
   287     001E  00FC               	movwf	__pdataCOMMON& (0+127)
   288     001F  118A  214F  118A   	fcall	__pidataCOMMON+1	;fetch initializer
   289     0022  00FD               	movwf	(__pdataCOMMON+1)& (0+127)
   290                           
   291                           ; Clear objects allocated to BANK0
   292     0023  01B2               	clrf	__pbssBANK0& (0+127)
   293     0024  01B3               	clrf	(__pbssBANK0+1)& (0+127)
   294                           
   295                           ; Clear objects allocated to COMMON
   296     0025  01FA               	clrf	__pbssCOMMON& (0+127)
   297     0026  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   298     0027                     end_of_initialization:	
   299                           ;End of C runtime variable initialization code
   300                           
   301     0027                     __end_of__initialization:
   302     0027  0183               	clrf	3
   303     0028  118A  28D5         	ljmp	_main	;jump to C main() function
   304                           
   305                           	psect	bssCOMMON
   306     007A                     __pbssCOMMON:
   307     007A                     _overflow400:
   308     007A                     	ds	2
   309                           
   310                           	psect	dataCOMMON
   311     007C                     __pdataCOMMON:
   312     007C                     _start_400ms:
   313     007C                     	ds	2
   314                           
   315                           	psect	bssBANK0
   316     0032                     __pbssBANK0:
   317     0032                     _displaying:
   318     0032                     	ds	2
   319                           
   320                           	psect	dataBANK0
   321     0020                     __pdataBANK0:
   322     0020                     _options:
   323     0020                     	ds	16
   324     0030                     _HIGH:
   325     0030                     	ds	1
   326     0031                     _LOW:
   327     0031                     	ds	1
   328                           
   329                           	psect	inittext
   330     012F                     init_fetch0:	
   331                           ;	Called with low address in FSR and high address in W
   332                           
   333     012F  087E               	movf	btemp,w
   334     0130  008A               	movwf	10
   335     0131  087F               	movf	btemp+1,w
   336     0132  0082               	movwf	2
   337     0133                     init_ram0:	
   338                           ;Called with:
   339                           ;	high address of idata address in btemp 
   340                           ;	low address of idata address in btemp+1 
   341                           ;	low address of data in FSR
   342                           ;	high address + 1 of data in btemp-1
   343                           
   344     0133  118A  212F  118A   	fcall	init_fetch0
   345     0136  0080               	movwf	0
   346     0137  0A84               	incf	4,f
   347     0138  0804               	movf	4,w
   348     0139  067D               	xorwf	btemp+-1,w
   349     013A  1903               	btfsc	3,2
   350     013B  3400               	retlw	0
   351     013C  0AFF               	incf	btemp+1,f
   352     013D  1903               	btfsc	3,2
   353     013E  0AFE               	incf	btemp,f
   354     013F  2933               	goto	init_ram0
   355                           
   356                           	psect	cstackCOMMON
   357     0071                     __pcstackCOMMON:
   358     0071                     ?_tmr1_load_400ms:
   359     0071                     ?_tmr1_init_400ms_tick:	
   360                           ; 1 bytes @ 0x0
   361                           
   362     0071                     ?_isr:	
   363                           ; 1 bytes @ 0x0
   364                           
   365     0071                     ?_main:	
   366                           ; 1 bytes @ 0x0
   367                           
   368     0071                     ?i1_tmr1_load_400ms:	
   369                           ; 1 bytes @ 0x0
   370                           
   371     0071                     ?_get_mics:	
   372                           ; 1 bytes @ 0x0
   373                           
   374     0071                     ??i1_tmr1_load_400ms:	
   375                           ; 2 bytes @ 0x0
   376                           
   377                           
   378                           ; 1 bytes @ 0x0
   379     0071                     	ds	2
   380     0073                     ??_get_mics:
   381                           
   382                           ; 1 bytes @ 0x2
   383     0073                     	ds	2
   384     0075                     ??_isr:
   385                           
   386                           ; 1 bytes @ 0x4
   387     0075                     	ds	3
   388     0078                     isr@mics:
   389                           
   390                           ; 2 bytes @ 0x7
   391     0078                     	ds	2
   392                           
   393                           	psect	cstackBANK0
   394     0000                     __pcstackBANK0:
   395     0000                     ??_tmr1_load_400ms:
   396     0000                     ??_tmr1_init_400ms_tick:	
   397                           ; 1 bytes @ 0x0
   398                           
   399     0000                     ??_main:	
   400                           ; 1 bytes @ 0x0
   401                           
   402                           
   403                           	psect	maintext
   404     00D5                     __pmaintext:	
   405                           ; 1 bytes @ 0x0
   406 ;;
   407 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   408 ;;
   409 ;; *************** function _main *****************
   410 ;; Defined at:
   411 ;;		line 128 in file "main.c"
   412 ;; Parameters:    Size  Location     Type
   413 ;;		None
   414 ;; Auto vars:     Size  Location     Type
   415 ;;		None
   416 ;; Return value:  Size  Location     Type
   417 ;;                  1    wreg      void 
   418 ;; Registers used:
   419 ;;		wreg, status,2, status,0, pclath, cstack
   420 ;; Tracked objects:
   421 ;;		On entry : B00/0
   422 ;;		On exit  : 0/0
   423 ;;		Unchanged: 0/0
   424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   425 ;;      Params:         0       0       0       0
   426 ;;      Locals:         0       0       0       0
   427 ;;      Temps:          0       0       0       0
   428 ;;      Totals:         0       0       0       0
   429 ;;Total ram usage:        0 bytes
   430 ;; Hardware stack levels required when called: 4
   431 ;; This function calls:
   432 ;;		_tmr1_init_400ms_tick
   433 ;; This function is called by:
   434 ;;		Startup code after reset
   435 ;; This function uses a non-reentrant model
   436 ;;
   437                           
   438     00D5                     _main:	
   439                           ;psect for function _main
   440                           
   441     00D5                     l692:	
   442                           ;incstack = 0
   443                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   444                           
   445                           
   446                           ;main.c: 130:     ANSEL = 0X00;
   447     00D5  1683               	bsf	3,5	;RP0=1, select bank3
   448     00D6  1703               	bsf	3,6	;RP1=1, select bank3
   449     00D7  0188               	clrf	8	;volatile
   450                           
   451                           ;main.c: 131:     ANSELH = 0X00;
   452     00D8  0189               	clrf	9	;volatile
   453                           
   454                           ;main.c: 133:     TRISA = 0X00;
   455     00D9  1683               	bsf	3,5	;RP0=1, select bank1
   456     00DA  1303               	bcf	3,6	;RP1=0, select bank1
   457     00DB  0185               	clrf	5	;volatile
   458     00DC                     l694:
   459                           
   460                           ;main.c: 134:     TRISB = 3;
   461     00DC  3003               	movlw	3
   462     00DD  0086               	movwf	6	;volatile
   463                           
   464                           ;main.c: 135:     TRISC = 0X00;
   465     00DE  0187               	clrf	7	;volatile
   466     00DF                     l696:
   467                           
   468                           ;main.c: 138:     INTCONbits.GIE = 1;
   469     00DF  178B               	bsf	11,7	;volatile
   470     00E0                     l698:
   471                           
   472                           ;main.c: 139:     INTCONbits.RBIE = 1;
   473     00E0  158B               	bsf	11,3	;volatile
   474     00E1                     l700:
   475                           
   476                           ;main.c: 140:     IOCB = 0X03;
   477     00E1  3003               	movlw	3
   478     00E2  0096               	movwf	22	;volatile
   479     00E3                     l702:
   480                           
   481                           ;main.c: 142:     tmr1_init_400ms_tick();
   482     00E3  118A  2106  118A   	fcall	_tmr1_init_400ms_tick
   483     00E6                     l704:
   484                           
   485                           ;main.c: 144:     PORTC = 0;
   486     00E6  1283               	bcf	3,5	;RP0=0, select bank0
   487     00E7  1303               	bcf	3,6	;RP1=0, select bank0
   488     00E8  0187               	clrf	7	;volatile
   489     00E9                     l706:
   490                           
   491                           ;main.c: 145:     PORTAbits.RA0 = 0;
   492     00E9  1005               	bcf	5,0	;volatile
   493     00EA                     l708:
   494                           
   495                           ;main.c: 146:     PORTAbits.RA1 = 1;
   496     00EA  1485               	bsf	5,1	;volatile
   497     00EB                     l73:	
   498                           ;main.c: 148:     while(1) {
   499                           
   500     00EB                     l74:	
   501                           ;main.c: 149:     }
   502                           
   503     00EB  28EB               	goto	l73
   504     00EC  118A  280D         	ljmp	start
   505     00EE                     __end_of_main:
   506                           
   507                           	psect	text1
   508     0106                     __ptext1:	
   509 ;; *************** function _tmr1_init_400ms_tick *****************
   510 ;; Defined at:
   511 ;;		line 70 in file "main.c"
   512 ;; Parameters:    Size  Location     Type
   513 ;;		None
   514 ;; Auto vars:     Size  Location     Type
   515 ;;		None
   516 ;; Return value:  Size  Location     Type
   517 ;;                  1    wreg      void 
   518 ;; Registers used:
   519 ;;		wreg, status,2, status,0, pclath, cstack
   520 ;; Tracked objects:
   521 ;;		On entry : 0/0
   522 ;;		On exit  : 0/0
   523 ;;		Unchanged: 0/0
   524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   525 ;;      Params:         0       0       0       0
   526 ;;      Locals:         0       0       0       0
   527 ;;      Temps:          0       0       0       0
   528 ;;      Totals:         0       0       0       0
   529 ;;Total ram usage:        0 bytes
   530 ;; Hardware stack levels used: 1
   531 ;; Hardware stack levels required when called: 3
   532 ;; This function calls:
   533 ;;		_tmr1_load_400ms
   534 ;; This function is called by:
   535 ;;		_main
   536 ;; This function uses a non-reentrant model
   537 ;;
   538                           
   539     0106                     _tmr1_init_400ms_tick:	
   540                           ;psect for function _tmr1_init_400ms_tick
   541                           
   542     0106                     l626:	
   543                           ;incstack = 0
   544                           ; Regs used in _tmr1_init_400ms_tick: [wreg+status,2+status,0+pclath+cstack]
   545                           
   546                           
   547                           ;main.c: 72:     T1CONbits.TMR1ON = 0;
   548     0106  1283               	bcf	3,5	;RP0=0, select bank0
   549     0107  1303               	bcf	3,6	;RP1=0, select bank0
   550     0108  1010               	bcf	16,0	;volatile
   551                           
   552                           ;main.c: 73:     T1CONbits.T1CKPS0 = 1;
   553     0109  1610               	bsf	16,4	;volatile
   554                           
   555                           ;main.c: 74:     T1CONbits.T1CKPS1 = 1;
   556     010A  1690               	bsf	16,5	;volatile
   557                           
   558                           ;main.c: 75:     T1CONbits.TMR1CS = 0;
   559     010B  1090               	bcf	16,1	;volatile
   560                           
   561                           ;main.c: 76:     T1CONbits.T1OSCEN = 0;
   562     010C  1190               	bcf	16,3	;volatile
   563     010D                     l628:
   564                           
   565                           ;main.c: 77:     TMR1 = 0;
   566     010D  018E               	clrf	14	;volatile
   567     010E  018F               	clrf	15	;volatile
   568     010F                     l630:
   569                           
   570                           ;main.c: 78:     tmr1_load_400ms();
   571     010F  118A  2140  118A   	fcall	_tmr1_load_400ms
   572     0112                     l632:
   573                           
   574                           ;main.c: 79:     PIR1bits.TMR1IF = 0;
   575     0112  1283               	bcf	3,5	;RP0=0, select bank0
   576     0113  1303               	bcf	3,6	;RP1=0, select bank0
   577     0114  100C               	bcf	12,0	;volatile
   578     0115                     l634:
   579                           
   580                           ;main.c: 80:     PIE1bits.TMR1IE = 1;
   581     0115  1683               	bsf	3,5	;RP0=1, select bank1
   582     0116  1303               	bcf	3,6	;RP1=0, select bank1
   583     0117  140C               	bsf	12,0	;volatile
   584     0118                     l636:
   585                           
   586                           ;main.c: 81:     INTCONbits.PEIE = 1;
   587     0118  170B               	bsf	11,6	;volatile
   588     0119                     l638:
   589                           
   590                           ;main.c: 82:     T1CONbits.TMR1ON = 1;
   591     0119  1283               	bcf	3,5	;RP0=0, select bank0
   592     011A  1303               	bcf	3,6	;RP1=0, select bank0
   593     011B  1410               	bsf	16,0	;volatile
   594     011C                     l45:
   595     011C  0008               	return
   596     011D                     __end_of_tmr1_init_400ms_tick:
   597                           
   598                           	psect	text2
   599     0140                     __ptext2:	
   600 ;; *************** function _tmr1_load_400ms *****************
   601 ;; Defined at:
   602 ;;		line 62 in file "main.c"
   603 ;; Parameters:    Size  Location     Type
   604 ;;		None
   605 ;; Auto vars:     Size  Location     Type
   606 ;;		None
   607 ;; Return value:  Size  Location     Type
   608 ;;                  1    wreg      void 
   609 ;; Registers used:
   610 ;;		wreg
   611 ;; Tracked objects:
   612 ;;		On entry : 0/0
   613 ;;		On exit  : 0/0
   614 ;;		Unchanged: 0/0
   615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   616 ;;      Params:         0       0       0       0
   617 ;;      Locals:         0       0       0       0
   618 ;;      Temps:          0       0       0       0
   619 ;;      Totals:         0       0       0       0
   620 ;;Total ram usage:        0 bytes
   621 ;; Hardware stack levels used: 1
   622 ;; Hardware stack levels required when called: 2
   623 ;; This function calls:
   624 ;;		Nothing
   625 ;; This function is called by:
   626 ;;		_tmr1_init_400ms_tick
   627 ;; This function uses a non-reentrant model
   628 ;;
   629                           
   630     0140                     _tmr1_load_400ms:	
   631                           ;psect for function _tmr1_load_400ms
   632                           
   633     0140                     l620:	
   634                           ;incstack = 0
   635                           ; Regs used in _tmr1_load_400ms: [wreg]
   636                           
   637                           
   638                           ;main.c: 63:     TMR1 = start_400ms;
   639     0140  087D               	movf	_start_400ms+1,w
   640     0141  1283               	bcf	3,5	;RP0=0, select bank0
   641     0142  1303               	bcf	3,6	;RP1=0, select bank0
   642     0143  008F               	movwf	15	;volatile
   643     0144  087C               	movf	_start_400ms,w
   644     0145  008E               	movwf	14	;volatile
   645     0146                     l39:
   646     0146  0008               	return
   647     0147                     __end_of_tmr1_load_400ms:
   648                           
   649                           	psect	text3
   650     002A                     __ptext3:	
   651 ;; *************** function _isr *****************
   652 ;; Defined at:
   653 ;;		line 87 in file "main.c"
   654 ;; Parameters:    Size  Location     Type
   655 ;;		None
   656 ;; Auto vars:     Size  Location     Type
   657 ;;  mics            2    7[COMMON] int 
   658 ;; Return value:  Size  Location     Type
   659 ;;                  1    wreg      void 
   660 ;; Registers used:
   661 ;;		wreg, status,2, status,0, pclath, btemp1, cstack
   662 ;; Tracked objects:
   663 ;;		On entry : 0/0
   664 ;;		On exit  : 0/0
   665 ;;		Unchanged: 0/0
   666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   667 ;;      Params:         0       0       0       0
   668 ;;      Locals:         2       0       0       0
   669 ;;      Temps:          3       0       0       0
   670 ;;      Totals:         5       0       0       0
   671 ;;Total ram usage:        5 bytes
   672 ;; Hardware stack levels used: 1
   673 ;; Hardware stack levels required when called: 1
   674 ;; This function calls:
   675 ;;		_get_mics
   676 ;;		i1_tmr1_load_400ms
   677 ;; This function is called by:
   678 ;;		Interrupt level 1
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682     002A                     _isr:	
   683                           ;psect for function _isr
   684                           
   685     002A                     i1l716:
   686                           
   687                           ;main.c: 90:     if (PIE1bits.TMR1IE && PIR1bits.TMR1IF) {
   688     002A  1683               	bsf	3,5	;RP0=1, select bank1
   689     002B  1303               	bcf	3,6	;RP1=0, select bank1
   690     002C  1C0C               	btfss	12,0	;volatile
   691     002D  282F               	goto	u14_21
   692     002E  2830               	goto	u14_20
   693     002F                     u14_21:
   694     002F  2884               	goto	i1l742
   695     0030                     u14_20:
   696     0030                     i1l718:
   697     0030  1283               	bcf	3,5	;RP0=0, select bank0
   698     0031  1303               	bcf	3,6	;RP1=0, select bank0
   699     0032  1C0C               	btfss	12,0	;volatile
   700     0033  2835               	goto	u15_21
   701     0034  2836               	goto	u15_20
   702     0035                     u15_21:
   703     0035  2884               	goto	i1l742
   704     0036                     u15_20:
   705     0036                     i1l720:
   706                           
   707                           ;main.c: 91:         tmr1_load_400ms();
   708     0036  118A  2147  118A   	fcall	i1_tmr1_load_400ms
   709     0039                     i1l722:
   710                           
   711                           ;main.c: 92:         PIR1bits.TMR1IF = 0;
   712     0039  1283               	bcf	3,5	;RP0=0, select bank0
   713     003A  1303               	bcf	3,6	;RP1=0, select bank0
   714     003B  100C               	bcf	12,0	;volatile
   715     003C                     i1l724:
   716                           
   717                           ;main.c: 93:         if (overflow400 > 5 && displaying==1) {
   718     003C  087B               	movf	_overflow400+1,w
   719     003D  3A80               	xorlw	128
   720     003E  00FF               	movwf	btemp1
   721     003F  3080               	movlw	128
   722     0040  027F               	subwf	btemp1,w
   723     0041  1D03               	skipz
   724     0042  2845               	goto	u16_25
   725     0043  3006               	movlw	6
   726     0044  027A               	subwf	_overflow400,w
   727     0045                     u16_25:
   728     0045  1C03               	skipc
   729     0046  2848               	goto	u16_21
   730     0047  2849               	goto	u16_20
   731     0048                     u16_21:
   732     0048  2857               	goto	i1l730
   733     0049                     u16_20:
   734     0049                     i1l726:
   735     0049  1283               	bcf	3,5	;RP0=0, select bank0
   736     004A  1303               	bcf	3,6	;RP1=0, select bank0
   737     004B  0332               	decf	_displaying,w
   738     004C  0433               	iorwf	_displaying+1,w
   739     004D  1D03               	btfss	3,2
   740     004E  2850               	goto	u17_21
   741     004F  2851               	goto	u17_20
   742     0050                     u17_21:
   743     0050  2857               	goto	i1l730
   744     0051                     u17_20:
   745     0051                     i1l728:
   746                           
   747                           ;main.c: 94:             PORTC = 0;
   748     0051  0187               	clrf	7	;volatile
   749                           
   750                           ;main.c: 95:             displaying = 0;
   751     0052  01B2               	clrf	_displaying
   752     0053  01B3               	clrf	_displaying+1
   753                           
   754                           ;main.c: 96:             overflow400 = 0;
   755     0054  01FA               	clrf	_overflow400
   756     0055  01FB               	clrf	_overflow400+1
   757                           
   758                           ;main.c: 97:         } else if (displaying == 0 && overflow400==3) {
   759     0056  2884               	goto	i1l742
   760     0057                     i1l730:
   761     0057  1283               	bcf	3,5	;RP0=0, select bank0
   762     0058  1303               	bcf	3,6	;RP1=0, select bank0
   763     0059  0832               	movf	_displaying,w
   764     005A  0433               	iorwf	_displaying+1,w
   765     005B  1D03               	btfss	3,2
   766     005C  285E               	goto	u18_21
   767     005D  285F               	goto	u18_20
   768     005E                     u18_21:
   769     005E  2871               	goto	i1l738
   770     005F                     u18_20:
   771     005F                     i1l732:
   772     005F  3003               	movlw	3
   773     0060  067A               	xorwf	_overflow400,w
   774     0061  047B               	iorwf	_overflow400+1,w
   775     0062  1D03               	btfss	3,2
   776     0063  2865               	goto	u19_21
   777     0064  2866               	goto	u19_20
   778     0065                     u19_21:
   779     0065  2871               	goto	i1l738
   780     0066                     u19_20:
   781     0066                     i1l734:
   782                           
   783                           ;main.c: 98:             PORTC = 0b11100011;
   784     0066  30E3               	movlw	227
   785     0067  0087               	movwf	7	;volatile
   786     0068                     i1l736:
   787                           
   788                           ;main.c: 99:             displaying = 1;
   789     0068  3001               	movlw	1
   790     0069  00B2               	movwf	_displaying
   791     006A  3000               	movlw	0
   792     006B  00B3               	movwf	_displaying+1
   793                           
   794                           ;main.c: 100:             overflow400 = 1;
   795     006C  3001               	movlw	1
   796     006D  00FA               	movwf	_overflow400
   797     006E  3000               	movlw	0
   798     006F  00FB               	movwf	_overflow400+1
   799                           
   800                           ;main.c: 101:         } else if (overflow400 > 0) {
   801     0070  2884               	goto	i1l742
   802     0071                     i1l738:
   803     0071  087B               	movf	_overflow400+1,w
   804     0072  3A80               	xorlw	128
   805     0073  00FF               	movwf	btemp1
   806     0074  3080               	movlw	128
   807     0075  027F               	subwf	btemp1,w
   808     0076  1D03               	skipz
   809     0077  287A               	goto	u20_25
   810     0078  3001               	movlw	1
   811     0079  027A               	subwf	_overflow400,w
   812     007A                     u20_25:
   813     007A  1C03               	skipc
   814     007B  287D               	goto	u20_21
   815     007C  287E               	goto	u20_20
   816     007D                     u20_21:
   817     007D  2884               	goto	i1l742
   818     007E                     u20_20:
   819     007E                     i1l740:
   820                           
   821                           ;main.c: 102:             overflow400++;
   822     007E  3001               	movlw	1
   823     007F  07FA               	addwf	_overflow400,f
   824     0080  1803               	skipnc
   825     0081  0AFB               	incf	_overflow400+1,f
   826     0082  3000               	movlw	0
   827     0083  07FB               	addwf	_overflow400+1,f
   828     0084                     i1l742:
   829                           
   830                           ;main.c: 105:     if (INTCONbits.RBIE && INTCONbits.RBIF && displaying==0) {
   831     0084  1D8B               	btfss	11,3	;volatile
   832     0085  2887               	goto	u21_21
   833     0086  2888               	goto	u21_20
   834     0087                     u21_21:
   835     0087  28CC               	goto	i1l68
   836     0088                     u21_20:
   837     0088                     i1l744:
   838     0088  1C0B               	btfss	11,0	;volatile
   839     0089  288B               	goto	u22_21
   840     008A  288C               	goto	u22_20
   841     008B                     u22_21:
   842     008B  28CC               	goto	i1l68
   843     008C                     u22_20:
   844     008C                     i1l746:
   845     008C  1283               	bcf	3,5	;RP0=0, select bank0
   846     008D  1303               	bcf	3,6	;RP1=0, select bank0
   847     008E  0832               	movf	_displaying,w
   848     008F  0433               	iorwf	_displaying+1,w
   849     0090  1D03               	btfss	3,2
   850     0091  2893               	goto	u23_21
   851     0092  2894               	goto	u23_20
   852     0093                     u23_21:
   853     0093  28CC               	goto	i1l68
   854     0094                     u23_20:
   855     0094                     i1l748:
   856                           
   857                           ;main.c: 106:         if (PORTBbits.RB0 == 1) {
   858     0094  1C06               	btfss	6,0	;volatile
   859     0095  2897               	goto	u24_21
   860     0096  2898               	goto	u24_20
   861     0097                     u24_21:
   862     0097  28A2               	goto	i1l61
   863     0098                     u24_20:
   864     0098                     i1l750:
   865                           
   866                           ;main.c: 107:             TMR1 = 0;
   867     0098  018E               	clrf	14	;volatile
   868     0099  018F               	clrf	15	;volatile
   869     009A                     i1l752:
   870                           
   871                           ;main.c: 108:             tmr1_load_400ms();
   872     009A  118A  2147  118A   	fcall	i1_tmr1_load_400ms
   873     009D                     i1l754:
   874                           
   875                           ;main.c: 109:             overflow400 = 1;
   876     009D  3001               	movlw	1
   877     009E  00FA               	movwf	_overflow400
   878     009F  3000               	movlw	0
   879     00A0  00FB               	movwf	_overflow400+1
   880                           
   881                           ;main.c: 110:         } else if (PORTBbits.RB0 == 0) {
   882     00A1  28CB               	goto	i1l764
   883     00A2                     i1l61:
   884     00A2  1806               	btfsc	6,0	;volatile
   885     00A3  28A5               	goto	u25_21
   886     00A4  28A6               	goto	u25_20
   887     00A5                     u25_21:
   888     00A5  28CB               	goto	i1l764
   889     00A6                     u25_20:
   890     00A6                     i1l756:
   891                           
   892                           ;main.c: 111:             int mics = get_mics();
   893     00A6  118A  20EE  118A   	fcall	_get_mics
   894     00A9  0872               	movf	?_get_mics+1,w
   895     00AA  00F9               	movwf	isr@mics+1
   896     00AB  0871               	movf	?_get_mics,w
   897     00AC  00F8               	movwf	isr@mics
   898     00AD                     i1l758:
   899                           
   900                           ;main.c: 112:             if (mics < 30000) {
   901     00AD  0879               	movf	isr@mics+1,w
   902     00AE  3A80               	xorlw	128
   903     00AF  00FF               	movwf	btemp1
   904     00B0  30F5               	movlw	245
   905     00B1  027F               	subwf	btemp1,w
   906     00B2  1D03               	skipz
   907     00B3  28B6               	goto	u26_25
   908     00B4  3030               	movlw	48
   909     00B5  0278               	subwf	isr@mics,w
   910     00B6                     u26_25:
   911     00B6  1803               	skipnc
   912     00B7  28B9               	goto	u26_21
   913     00B8  28BA               	goto	u26_20
   914     00B9                     u26_21:
   915     00B9  28BF               	goto	i1l64
   916     00BA                     u26_20:
   917     00BA                     i1l760:
   918                           
   919                           ;main.c: 113:                 PORTC = 0b11110101;
   920     00BA  30F5               	movlw	245
   921     00BB  1283               	bcf	3,5	;RP0=0, select bank0
   922     00BC  1303               	bcf	3,6	;RP1=0, select bank0
   923     00BD  0087               	movwf	7	;volatile
   924                           
   925                           ;main.c: 114:             } else if (mics < 200000) {
   926     00BE  28C3               	goto	i1l762
   927     00BF                     i1l64:
   928                           
   929                           ;main.c: 115:                 PORTC = 0b00001000;
   930     00BF  3008               	movlw	8
   931     00C0  1283               	bcf	3,5	;RP0=0, select bank0
   932     00C1  1303               	bcf	3,6	;RP1=0, select bank0
   933     00C2  0087               	movwf	7	;volatile
   934     00C3                     i1l762:	
   935                           ;main.c: 116:             } else {
   936                           
   937                           
   938                           ;main.c: 119:             overflow400 = 2;
   939     00C3  3002               	movlw	2
   940     00C4  00FA               	movwf	_overflow400
   941     00C5  3000               	movlw	0
   942     00C6  00FB               	movwf	_overflow400+1
   943                           
   944                           ;main.c: 120:             displaying = 1;
   945     00C7  3001               	movlw	1
   946     00C8  00B2               	movwf	_displaying
   947     00C9  3000               	movlw	0
   948     00CA  00B3               	movwf	_displaying+1
   949     00CB                     i1l764:
   950                           
   951                           ;main.c: 122:         INTCONbits.RBIF = 0;
   952     00CB  100B               	bcf	11,0	;volatile
   953     00CC                     i1l68:
   954     00CC  0877               	movf	??_isr+2,w
   955     00CD  00FF               	movwf	btemp1
   956     00CE  0876               	movf	??_isr+1,w
   957     00CF  008A               	movwf	10
   958     00D0  0E75               	swapf	??_isr,w
   959     00D1  0083               	movwf	3
   960     00D2  0EFE               	swapf	btemp,f
   961     00D3  0E7E               	swapf	btemp,w
   962     00D4  0009               	retfie
   963     00D5                     __end_of_isr:
   964                           
   965                           	psect	intentry
   966     0004                     __pintentry:	
   967                           ;incstack = 0
   968                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+btemp1+cstack]
   969                           
   970     0004                     interrupt_function:
   971     007E                     saved_w         set	btemp
   972     0004  00FE               	movwf	btemp
   973     0005  0E03               	swapf	3,w
   974     0006  00F5               	movwf	??_isr
   975     0007  080A               	movf	10,w
   976     0008  00F6               	movwf	??_isr+1
   977     0009  087F               	movf	btemp1,w
   978     000A  00F7               	movwf	??_isr+2
   979     000B  118A  282A         	ljmp	_isr
   980                           
   981                           	psect	text4
   982     0147                     __ptext4:	
   983 ;; *************** function i1_tmr1_load_400ms *****************
   984 ;; Defined at:
   985 ;;		line 62 in file "main.c"
   986 ;; Parameters:    Size  Location     Type
   987 ;;		None
   988 ;; Auto vars:     Size  Location     Type
   989 ;;		None
   990 ;; Return value:  Size  Location     Type
   991 ;;                  1    wreg      void 
   992 ;; Registers used:
   993 ;;		wreg
   994 ;; Tracked objects:
   995 ;;		On entry : 0/0
   996 ;;		On exit  : 0/0
   997 ;;		Unchanged: 0/0
   998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   999 ;;      Params:         0       0       0       0
  1000 ;;      Locals:         0       0       0       0
  1001 ;;      Temps:          0       0       0       0
  1002 ;;      Totals:         0       0       0       0
  1003 ;;Total ram usage:        0 bytes
  1004 ;; Hardware stack levels used: 1
  1005 ;; This function calls:
  1006 ;;		Nothing
  1007 ;; This function is called by:
  1008 ;;		_isr
  1009 ;; This function uses a non-reentrant model
  1010 ;;
  1011                           
  1012     0147                     i1_tmr1_load_400ms:	
  1013                           ;psect for function i1_tmr1_load_400ms
  1014                           
  1015     0147                     i1l714:	
  1016                           ;incstack = 0
  1017                           ; Regs used in i1_tmr1_load_400ms: [wreg]
  1018                           
  1019                           
  1020                           ;main.c: 63:     TMR1 = start_400ms;
  1021     0147  087D               	movf	_start_400ms+1,w
  1022     0148  1283               	bcf	3,5	;RP0=0, select bank0
  1023     0149  1303               	bcf	3,6	;RP1=0, select bank0
  1024     014A  008F               	movwf	15	;volatile
  1025     014B  087C               	movf	_start_400ms,w
  1026     014C  008E               	movwf	14	;volatile
  1027     014D                     i1l39:
  1028     014D  0008               	return
  1029     014E                     __end_ofi1_tmr1_load_400ms:
  1030                           
  1031                           	psect	text5
  1032     00EE                     __ptext5:	
  1033 ;; *************** function _get_mics *****************
  1034 ;; Defined at:
  1035 ;;		line 66 in file "main.c"
  1036 ;; Parameters:    Size  Location     Type
  1037 ;;		None
  1038 ;; Auto vars:     Size  Location     Type
  1039 ;;		None
  1040 ;; Return value:  Size  Location     Type
  1041 ;;                  2    0[COMMON] int 
  1042 ;; Registers used:
  1043 ;;		wreg, status,2, status,0
  1044 ;; Tracked objects:
  1045 ;;		On entry : 0/0
  1046 ;;		On exit  : 0/0
  1047 ;;		Unchanged: 0/0
  1048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1049 ;;      Params:         2       0       0       0
  1050 ;;      Locals:         0       0       0       0
  1051 ;;      Temps:          2       0       0       0
  1052 ;;      Totals:         4       0       0       0
  1053 ;;Total ram usage:        4 bytes
  1054 ;; Hardware stack levels used: 1
  1055 ;; This function calls:
  1056 ;;		Nothing
  1057 ;; This function is called by:
  1058 ;;		_isr
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062     00EE                     _get_mics:	
  1063                           ;psect for function _get_mics
  1064                           
  1065     00EE                     i1l710:	
  1066                           ;incstack = 0
  1067                           ; Regs used in _get_mics: [wreg+status,2+status,0]
  1068                           
  1069                           
  1070                           ;main.c: 67:     return (TMR1 - start_400ms)*8;
  1071     00EE  087C               	movf	_start_400ms,w
  1072     00EF  1283               	bcf	3,5	;RP0=0, select bank0
  1073     00F0  1303               	bcf	3,6	;RP1=0, select bank0
  1074     00F1  020E               	subwf	14,w	;volatile
  1075     00F2  00F3               	movwf	??_get_mics
  1076     00F3  087D               	movf	_start_400ms+1,w
  1077     00F4  1C03               	skipc
  1078     00F5  0A7D               	incf	_start_400ms+1,w
  1079     00F6  020F               	subwf	15,w	;volatile
  1080     00F7  00F4               	movwf	??_get_mics+1
  1081     00F8  1003               	clrc
  1082     00F9  0DF3               	rlf	??_get_mics,f
  1083     00FA  0DF4               	rlf	??_get_mics+1,f
  1084     00FB  1003               	clrc
  1085     00FC  0DF3               	rlf	??_get_mics,f
  1086     00FD  0DF4               	rlf	??_get_mics+1,f
  1087     00FE  1003               	clrc
  1088     00FF  0DF3               	rlf	??_get_mics,f
  1089     0100  0DF4               	rlf	??_get_mics+1,f
  1090     0101  0873               	movf	??_get_mics,w
  1091     0102  00F1               	movwf	?_get_mics
  1092     0103  0874               	movf	??_get_mics+1,w
  1093     0104  00F2               	movwf	?_get_mics+1
  1094     0105                     i1l42:
  1095     0105  0008               	return
  1096     0106                     __end_of_get_mics:
  1097     0001                     ___latbits      equ	1
  1098     007E                     btemp           set	126	;btemp
  1099     007E                     btemp0          set	126
  1100     007F                     btemp1          set	127
  1101     007E                     wtemp0          set	126
  1102     007F                     wtemp0a         set	127
  1103     007F                     ttemp0a         set	127
  1104     0080                     ltemp0a         set	128
  1105                           
  1106                           	psect	config
  1107                           
  1108                           ;Config register CONFIG1 @ 0x2007
  1109                           ;	Oscillator Selection bits
  1110                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  1111                           ;	Watchdog Timer Enable bit
  1112                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1113                           ;	Power-up Timer Enable bit
  1114                           ;	PWRTE = OFF, PWRT disabled
  1115                           ;	RE3/MCLR pin function select bit
  1116                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  1117                           ;	Code Protection bit
  1118                           ;	CP = OFF, Program memory code protection is disabled
  1119                           ;	Data Code Protection bit
  1120                           ;	CPD = OFF, Data memory code protection is disabled
  1121                           ;	Brown Out Reset Selection bits
  1122                           ;	BOREN = OFF, BOR disabled
  1123                           ;	Internal External Switchover bit
  1124                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1125                           ;	Fail-Safe Clock Monitor Enabled bit
  1126                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1127                           ;	Low Voltage Programming Enable bit
  1128                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1129                           ;	In-Circuit Debugger Mode bit
  1130                           ;	DEBUG = 0x1, unprogrammed default
  1131     2007                     	org	8199
  1132     2007  20F1               	dw	8433
  1133                           
  1134                           ;Config register CONFIG2 @ 0x2008
  1135                           ;	Brown-out Reset Selection bit
  1136                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1137                           ;	Flash Program Memory Self Write Enable bits
  1138                           ;	WRT = OFF, Write protection off
  1139     2008                     	org	8200
  1140     2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        20
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13      9      13
    BANK0            80      0      20
    BANK1            80      0       0
    BANK2            69      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_get_mics

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
               _tmr1_init_400ms_tick
 ---------------------------------------------------------------------------------
 (1) _tmr1_init_400ms_tick                                 0     0      0       0
                    _tmr1_load_400ms
 ---------------------------------------------------------------------------------
 (2) _tmr1_load_400ms                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  5     5      0      23
                                              4 COMMON     5     5      0
                           _get_mics
                  i1_tmr1_load_400ms
 ---------------------------------------------------------------------------------
 (4) i1_tmr1_load_400ms                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _get_mics                                             4     2      2       0
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _tmr1_init_400ms_tick
     _tmr1_load_400ms

 _isr (ROOT)
   _get_mics
   i1_tmr1_load_400ms

Address spaces:
Name               Size   Autos  Total    Usage
BANK2               69      0       0      0.0%
BITBANK2            69      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80      0      20     25.0%
BITBANK0            80      0       0      0.0%
COMMON              13      9      13    100.0%
BITCOMMON           13      0       0      0.0%
DATA                 0      0      33      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.10 build 20250813170317 
Symbol Table                                                                                   Tue Sep 23 11:28:46 2025

                           pc 0002                            l45 011C                            l39 0146  
                          l73 00EB                            l74 00EB                            fsr 0004  
         ??i1_tmr1_load_400ms 0071                           l620 0140                           l700 00E1  
                         l630 010F                           l702 00E3                           l632 0112  
                         l704 00E6                           l634 0115                           l626 0106  
                         l706 00E9                           l636 0118                           l628 010D  
                         l708 00EA                           l638 0119                           l692 00D5  
                         l694 00DC                           l696 00DF                           l698 00E0  
                         _LOW 0031                           _isr 002A                           indf 0000  
                        ?_isr 0071                          _HIGH 0030                          _IOCB 0096  
                        i1l42 0105                          i1l61 00A2                          i1l39 014D  
                        i1l64 00BF                          i1l68 00CC                          _TMR1 000E  
   __end_ofi1_tmr1_load_400ms 014E                          _main 00D5                          btemp 007E  
                        start 000D                         ??_isr 0075                         ?_main 0071  
                       _ANSEL 0188                         i1l710 00EE                         i1l720 0036  
                       i1l714 0147                         i1l730 0057                         i1l722 0039  
                       i1l740 007E                         i1l732 005F                         i1l724 003C  
                       i1l716 002A                         i1l750 0098                         i1l734 0066  
                       i1l726 0049                         i1l718 0030                         i1l742 0084  
                       i1l760 00BA                         i1l752 009A                         i1l744 0088  
                       i1l736 0068                         i1l728 0051                         i1l762 00C3  
                       i1l754 009D                         i1l746 008C                         i1l738 0071  
                       i1l756 00A6                         i1l764 00CB                         i1l748 0094  
                       i1l758 00AD                         u20_20 007E                         u20_21 007D  
                       u20_25 007A                         u21_20 0088                         u21_21 0087  
                       u22_20 008C                         u14_20 0030                         u22_21 008B  
                       u14_21 002F                         u23_20 0094                         u15_20 0036  
                       u23_21 0093                         u15_21 0035                         u24_20 0098  
                       u16_20 0049                         u24_21 0097                         u16_21 0048  
                       u16_25 0045                         u25_20 00A6                         u17_20 0051  
                       u25_21 00A5                         u17_21 0050                         u26_20 00BA  
                       u18_20 005F                         u26_21 00B9                         u18_21 005E  
                       u26_25 00B6                         u19_20 0066                         u19_21 0065  
                       _PORTC 0007                         _TRISA 0085                         _TRISB 0086  
                       _TRISC 0087                         btemp0 007E                         btemp1 007F  
                       pclath 000A                         status 0003                         wtemp0 007E  
      ??_tmr1_init_400ms_tick 0000               __initialization 000F                  __end_of_main 00EE  
                      ??_main 0000             ??_tmr1_load_400ms 0000                        _ANSELH 0189  
            __end_of_get_mics 0106                  __pdataCOMMON 007C                        ltemp0a 0080  
                      saved_w 007E                        ttemp0a 007F                        wtemp0a 007F  
     __end_of__initialization 0027                __pcstackCOMMON 0071                  __pidataBANK0 011D  
                  __pbssBANK0 0032                    __pmaintext 00D5                    __pintentry 0004  
                  _displaying 0032                     ?_get_mics 0071               _tmr1_load_400ms 0140  
                     __ptext1 0106                       __ptext2 0140                       __ptext3 002A  
                     __ptext4 0147                       __ptext5 00EE                     _T1CONbits 0010  
                     _options 0020                    ??_get_mics 0073          end_of_initialization 0027  
                     isr@mics 0078                     _PORTAbits 0005                     _PORTBbits 0006  
     __end_of_tmr1_load_400ms 0147                 __pidataCOMMON 014E           start_initialization 000F  
                 __end_of_isr 00D5                    init_fetch0 012F                   __pdataBANK0 0020  
                 __pbssCOMMON 007A                     ___latbits 0001                 __pcstackBANK0 0000  
            ?_tmr1_load_400ms 0071             interrupt_function 0004                      _PIE1bits 008C  
                    _PIR1bits 000C  __end_of_tmr1_init_400ms_tick 011D                      _get_mics 00EE  
                  _INTCONbits 000B                      init_ram0 0133                      intlevel1 0000  
        _tmr1_init_400ms_tick 0106                   _overflow400 007A             i1_tmr1_load_400ms 0147  
       ?_tmr1_init_400ms_tick 0071            ?i1_tmr1_load_400ms 0071                   _start_400ms 007C  
